<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="get_outputs" timestamp="2025-06-24T09:31:47Z" hostname="201818ab1a69" tests="6" skipped="0" failures="0" errors="0" time="0.209">
    <testcase time="0.092" classname="get_outputs" name="returns_an_empty_list_if_nothing_is_printed"/>
    <testcase time="0.045" classname="get_outputs" name="implicitly_printed_objects_are_returned_asis_in_a_list"/>
    <testcase time="0.029" classname="get_outputs" name="explicitly_printed_objects_are_returned_as_console_output_string_in_a_list"/>
    <testcase time="0.023" classname="get_outputs" name="printed_plots_are_returned_as_recordedplot_in_a_list"/>
    <testcase time="0.01" classname="get_outputs" name="warnings_are_returned_asis_in_a_list"/>
    <testcase time="0.01" classname="get_outputs" name="messages_are_returned_asis_in_a_list"/>
  </testsuite>
  <testsuite name="qenv-class" timestamp="2025-06-24T09:31:47Z" hostname="201818ab1a69" tests="5" skipped="0" failures="0" errors="0" time="0.039">
    <testcase time="0.014" classname="qenv_class" name="creates_a_locked_environment"/>
    <testcase time="0.004" classname="qenv_class" name="creates_a_locked_environment_when_.xData_is_manually_defined"/>
    <testcase time="0.004" classname="qenv_class" name="creates_a_locked_environment_when_.xData_is_manually_defined"/>
    <testcase time="0.0109999999999999" classname="qenv_class" name="throws_error_when_.xData_is_not_an_environment"/>
    <testcase time="0.00600000000000001" classname="qenv_class" name="initialized_qenv_s_have_different_environments"/>
  </testsuite>
  <testsuite name="qenv_concat" timestamp="2025-06-24T09:31:47Z" hostname="201818ab1a69" tests="12" skipped="0" failures="0" errors="0" time="0.163">
    <testcase time="0.022" classname="qenv_concat" name="Concatenate_two_identical_qenvs_outputs"/>
    <testcase time="0.027" classname="qenv_concat" name="Concatenate_two_identical_qenvs_outputs"/>
    <testcase time="0.021" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.001" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.019" classname="qenv_concat" name="Concatenate_qenvs_results_with_the_same_variable_the_RHS_has_priority"/>
    <testcase time="0.022" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00099999999999989" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.024" classname="qenv_concat" name="Concatenate_two_independent_qenvs_with_warnings_results_in_object_having_combined_warnings"/>
    <testcase time="0.02" classname="qenv_concat" name="Concatenate_two_independent_qenvs_with_messages_results_in_object_having_combined_messages"/>
  </testsuite>
  <testsuite name="qenv_constructor" timestamp="2025-06-24T09:31:48Z" hostname="201818ab1a69" tests="13" skipped="0" failures="2" errors="0" time="0.123">
    <testcase time="0.00800000000000001" classname="qenv_constructor" name="is_an_environment"/>
    <testcase time="0.004" classname="qenv_constructor" name="names_shows_nothing_on_empty_environment"/>
    <testcase time="0.00900000000000001" classname="qenv_constructor" name="names_shows_available_objets"/>
    <testcase time="0.012" classname="qenv_constructor" name="names_shows_hidden_objects"/>
    <testcase time="0.012" classname="qenv_constructor" name="ls_does_not_show_hidden_objects"/>
    <testcase time="0.014" classname="qenv_constructor" name="ls_all.names_TRUE_show_all_objects"/>
    <testcase time="0.00700000000000001" classname="qenv_constructor" name="does_not_allow_binding_to_be_added"/>
    <testcase time="0.013" classname="qenv_constructor" name="does_not_allow_binding_to_be_modified"/>
    <testcase time="0.00399999999999989" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.001" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.001" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.00800000000000001" classname="qenv_constructor" name="via_slot">
      <failure type="failure" message="parent.env(q@.xData) not identical to parent.env(.GlobalEnv). ('test-qenv_constructor.R:60:5')">parent.env(q@.xData) not identical to parent.env(.GlobalEnv).
Names: 1 string mismatch
Length mismatch: comparison on first 1 components
Component 1: Modes of target, current: function, character
Component 1: target, current do not match when deparsed
Component 1: 'current' is not an environment</failure>
    </testcase>
    <testcase time="0.03" classname="qenv_constructor" name="via_qenv_directly">
      <failure type="failure" message="parent.env(q) not identical to parent.env(.GlobalEnv). ('test-qenv_constructor.R:65:5')">parent.env(q) not identical to parent.env(.GlobalEnv).
Names: 1 string mismatch
Length mismatch: comparison on first 1 components
Component 1: Modes of target, current: function, character
Component 1: target, current do not match when deparsed
Component 1: 'current' is not an environment</failure>
    </testcase>
  </testsuite>
  <testsuite name="qenv_eval_code" timestamp="2025-06-24T09:31:48Z" hostname="201818ab1a69" tests="36" skipped="0" failures="5" errors="1" time="0.429">
    <testcase time="0.033" classname="qenv_eval_code" name="eval_code_evaluates_the_code_in_the_qenvs_environment"/>
    <testcase time="0.01" classname="qenv_eval_code" name="eval_code_locks_the_environment"/>
    <testcase time="0.017" classname="qenv_eval_code" name="eval_code_doesn_t_have_access_to_environment_where_it_s_called"/>
    <testcase time="0.024" classname="qenv_eval_code" name="getting_object_from_the_package_namespace_works_even_if_library_in_the_same_call"/>
    <testcase time="0.0099999999999999" classname="qenv_eval_code" name="eval_code_works_with_character"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_works_with_character"/>
    <testcase time="0.012" classname="qenv_eval_code" name="eval_code_works_with_expression"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_works_with_expression"/>
    <testcase time="0.005" classname="qenv_eval_code" name="eval_code_ignores_empty_code"/>
    <testcase time="0.012" classname="qenv_eval_code" name="eval_code_preserves_original_formatting_when_srcref_is_present_in_the_expression"/>
    <testcase time="0.00100000000000011" classname="qenv_eval_code" name="eval_code_preserves_original_formatting_when_srcref_is_present_in_the_expression"/>
    <testcase time="0.01" classname="qenv_eval_code" name="eval_code_works_with_quoted"/>
    <testcase time="0.00099999999999989" classname="qenv_eval_code" name="eval_code_works_with_quoted"/>
    <testcase time="0.012" classname="qenv_eval_code" name="eval_code_works_with_quoted_code_block"/>
    <testcase time="0.002" classname="qenv_eval_code" name="eval_code_works_with_quoted_code_block"/>
    <testcase time="0.0069999999999999" classname="qenv_eval_code" name="eval_code_fails_with_code_not_being_language_nor_character"/>
    <testcase time="0.00500000000000012" classname="qenv_eval_code" name="eval_code_fails_with_code_not_being_language_nor_character"/>
    <testcase time="0.00600000000000001" classname="qenv_eval_code" name="eval_code_fails_with_code_not_being_language_nor_character"/>
    <testcase time="0.022" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.00099999999999989" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.00100000000000011" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.0089999999999999" classname="qenv_eval_code" name="eval_code_accepts_calls_containing_only_comments_and_empty_spaces">
      <error type="error" message="Error in `dimnames(x) &lt;- dn`: length of 'dimnames' [2] not equal to array extent ('test-qenv_eval_code.R:109:3')">Error in `dimnames(x) &lt;- dn`: length of 'dimnames' [2] not equal to array extent
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-qenv_eval_code.R:109:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─teal.code::get_code(eval_code(qenv(), code))
  5. │ └─teal.code::dev_suppress(object)
  6. │   └─base::force(x)
  7. ├─teal.code::eval_code(qenv(), code)
  8. └─teal.code::eval_code(qenv(), code)
  9.   └─teal.code:::.eval_code(object = object, code = code, ...)
 10.     ├─base::paste(split_code(code), collapse = "\n")
 11.     └─teal.code:::split_code(code)
 12.       └─teal.code:::get_call_breaks(code)
 13.         └─base::`colnames&lt;-`(`*tmp*`, value = c("line", "col"))</error>
    </testcase>
    <testcase time="0.0330000000000001" classname="qenv_eval_code" name="eval_code_does_not_treat_as_an_assignment_operator"/>
    <testcase time="0.0209999999999999" classname="qenv_eval_code" name="comments_fall_into_proper_calls"/>
    <testcase time="0.016" classname="qenv_eval_code" name="comments_alone_are_pasted_to_the_next_following_call_element">
      <failure type="failure" message="as.character(q@code)[2] not identical to paste(code[2:3], collapse = &quot;\n&quot;). ('test-qenv_eval_code.R:142:3')">as.character(q@code)[2] not identical to paste(code[2:3], collapse = "\n").
1/1 mismatches
x[1]: "# comment"
y[1]: "# comment\ny &lt;- 6"</failure>
    </testcase>
    <testcase time="0.0109999999999999" classname="qenv_eval_code" name="comments_alone_are_pasted_to_the_next_following_call_element"/>
    <testcase time="0.0130000000000001" classname="qenv_eval_code" name="comments_at_the_end_of_src_are_added_to_the_previous_call_element">
      <failure type="failure" message="as.character(q@code) not identical to paste(code[1:2], collapse = &quot;\n&quot;). ('test-qenv_eval_code.R:155:3')">as.character(q@code) not identical to paste(code[1:2], collapse = "\n").
Lengths differ: 2 is not 1</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_eval_code" name="comments_at_the_end_of_src_are_added_to_the_previous_call_element"/>
    <testcase time="0.014" classname="qenv_eval_code" name="comments_from_the_same_line_are_associated_with_it_s_call"/>
    <testcase time="0.018" classname="qenv_eval_code" name="alone_comments_at_the_end_of_the_source_are_considered_as_continuation_of_the_last_call">
      <failure type="failure" message="as.character(q@code)[2] not identical to code[2]. ('test-qenv_eval_code.R:174:3')">as.character(q@code)[2] not identical to code[2].
1/1 mismatches
x[1]: "y &lt;- 10"
y[1]: "y &lt;- 10\n# comment"</failure>
    </testcase>
    <testcase time="0.028" classname="qenv_eval_code" name="comments_passed_alone_to_eval_code_that_contain_linksto_tag_have_detected_dependency"/>
    <testcase time="0.00500000000000012" classname="qenv_eval_code" name="comments_passed_alone_to_eval_code_that_contain_linksto_tag_have_detected_dependency">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to paste(code, collapse = &quot;\n&quot;). ('test-qenv_eval_code.R:180:3')">get_code(q, names = "x") not identical to paste(code, collapse = "\n").
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 5\n# comment @linksto x"</failure>
    </testcase>
    <testcase time="0.012" classname="qenv_eval_code" name="comments_passed_alone_to_eval_code_that_contain_linksto_tag_have_detected_dependency">
      <failure type="failure" message="attr(q@code[[2]], &quot;dependency&quot;) not identical to &quot;x&quot;. ('test-qenv_eval_code.R:184:3')">attr(q@code[[2]], "dependency") not identical to "x".
target is NULL, current is character</failure>
    </testcase>
    <testcase time="0.0199999999999998" classname="qenv_eval_code" name="object_printed_explicitly_is_stored_as_string_in_the_outputs_attribute_of_a_code_element"/>
    <testcase time="0.01" classname="qenv_eval_code" name="object_printed_implicitly_is_stored_asis_in_the_outputs_attribute_of_a_code_element"/>
    <testcase time="0.0130000000000001" classname="qenv_eval_code" name="plot_output_is_stored_as_recordedplot_in_the_outputs_attribute_of_a_code_element"/>
  </testsuite>
  <testsuite name="qenv_extract" timestamp="2025-06-24T09:31:48Z" hostname="201818ab1a69" tests="18" skipped="0" failures="4" errors="0" time="0.215">
    <testcase time="0.0189999999999999" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env_nor_code"/>
    <testcase time="0.00100000000000011" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env_nor_code"/>
    <testcase time="0.00299999999999989" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env_nor_code"/>
    <testcase time="0.00100000000000011" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env_nor_code"/>
    <testcase time="0.0190000000000001" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env"/>
    <testcase time="0.002" classname="qenv_extract" name="_._warns_and_subsets_to_empty_if_all_names_not_present_in_env"/>
    <testcase time="0.016" classname="qenv_extract" name="_._warns_and_subsets_to_existing_if_some_names_not_present_in_env_and_code"/>
    <testcase time="0.00099999999999989" classname="qenv_extract" name="_._warns_and_subsets_to_existing_if_some_names_not_present_in_env_and_code"/>
    <testcase time="0.00300000000000011" classname="qenv_extract" name="_._warns_and_subsets_to_existing_if_some_names_not_present_in_env_and_code"/>
    <testcase time="0.00299999999999989" classname="qenv_extract" name="_._warns_and_subsets_to_existing_if_some_names_not_present_in_env_and_code">
      <failure type="failure" message="`testthat::expect_equal(data[c(&quot;b&quot;, &quot;c&quot;, &quot;d&quot;)], data[&quot;b&quot;])` produced unexpected warnings. ('test-qenv_extract.R:38:3')">`testthat::expect_equal(data[c("b", "c", "d")], data["b"])` produced unexpected warnings.
Expected match: Object\\(s\\) not found in code: c, d.
Actual values:
* Some 'names' do not exist in the environment of the 'qenv'. Skipping those: c, d.
* Object(s) not found in code: b, c, d.
* Object(s) not found in code: b.</failure>
    </testcase>
    <testcase time="0.03" classname="qenv_extract" name="_._warns_if_name_is_not_in_code_but_is_present_in_env">
      <failure type="failure" message="`data[c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)]` produced unexpected warnings. ('test-qenv_extract.R:52:3')">`data[c("a", "b", "c")]` produced unexpected warnings.
Expected match: Object\\(s\\) not found in code: b, c.
Actual values:
* Object(s) not found in code: a, b, c.</failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="qenv_extract" name="_._doesn_t_warn_if_name_is_not_in_code_but_is_present_in_env_secret_feature_for_unverified_teal_data_"/>
    <testcase time="0.018" classname="qenv_extract" name="_._subsets_environment_and_code_to_specified_object_names"/>
    <testcase time="0.00300000000000011" classname="qenv_extract" name="_._subsets_environment_and_code_to_specified_object_names"/>
    <testcase time="0.0169999999999999" classname="qenv_extract" name="_._extracts_the_code_only_needed_to_recreate_objects_passed_through_names_"/>
    <testcase time="0.018" classname="qenv_extract" name="_._extracts_the_code_only_needed_to_recreate_objects_passed_through_names_">
      <failure type="failure" message="get_code(qs) not identical to c(&quot;x&lt;-1\na&lt;-1&quot;). ('test-qenv_extract.R:84:3')">get_code(qs) not identical to c("x&lt;-1\na&lt;-1").
1/1 mismatches
x[1]: ""
y[1]: "x&lt;-1\na&lt;-1"</failure>
    </testcase>
    <testcase time="0.0270000000000001" classname="qenv_extract" name="_._comments_are_preserved_in_the_code_and_associated_with_the_following_call"/>
    <testcase time="0.00499999999999989" classname="qenv_extract" name="_._comments_are_preserved_in_the_code_and_associated_with_the_following_call">
      <failure type="failure" message="get_code(qs) not identical to c(&quot;x&lt;-1 #comment\na&lt;-1&quot;). ('test-qenv_extract.R:92:3')">get_code(qs) not identical to c("x&lt;-1 #comment\na&lt;-1").
1/1 mismatches
x[1]: ""
y[1]: "x&lt;-1 #comment\na&lt;-1"</failure>
    </testcase>
  </testsuite>
  <testsuite name="qenv_get_code" timestamp="2025-06-24T09:31:48Z" hostname="201818ab1a69" tests="132" skipped="3" failures="57" errors="0" time="2.443">
    <testcase time="0.0309999999999999" classname="qenv_get_code" name="get_code_returns_code_character_1_by_default_of_qenv_object"/>
    <testcase time="0.018" classname="qenv_get_code" name="get_code_handles_code_elements_being_code_blocks"/>
    <testcase time="0.0150000000000001" classname="qenv_get_code" name="get_code_returns_expression_of_qenv_object_if_deparse_FALSE"/>
    <testcase time="0.0209999999999999" classname="qenv_get_code" name="get_code_called_with_qenv.error_returns_error_with_trace_in_error_message"/>
    <testcase time="0.00100000000000011" classname="qenv_get_code" name="get_code_called_with_qenv.error_returns_error_with_trace_in_error_message"/>
    <testcase time="0.0189999999999999" classname="qenv_get_code" name="get_code_formatted_returns_code_asis_but_replaces_with_"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="warns_if_empty_code_slot"/>
    <testcase time="0.002" classname="qenv_get_code" name="warns_if_empty_code_slot"/>
    <testcase time="0.018" classname="qenv_get_code" name="handles_the_code_without_symbols_on_rhs"/>
    <testcase time="0.004" classname="qenv_get_code" name="handles_the_code_without_symbols_on_rhs">
      <failure type="failure" message="get_code(eval_code(qenv(), code), names = &quot;a&quot;) not identical to &quot;a &lt;- 5&quot;. ('test-qenv_get_code.R:83:5')">get_code(eval_code(qenv(), code), names = "a") not identical to "a &lt;- 5".
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 5"</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="handles_the_code_included_in_curly_brackets">
      <skipped message="Reason: SHOULD THIS BE FIXED? it gives the whole code {1 + 1;a &lt;- 5} ('test-qenv_get_code.R:92:5')"/>
    </testcase>
    <testcase time="0.0309999999999999" classname="qenv_get_code" name="handles_the_code_of_length_1_when_at_least_one_is_enclosed_in_curly_brackets"/>
    <testcase time="0.004" classname="qenv_get_code" name="handles_the_code_of_length_1_when_at_least_one_is_enclosed_in_curly_brackets">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to &quot;{a&lt;-5}&quot;. ('test-qenv_get_code.R:103:5')">get_code(q, names = "a") not identical to "{a&lt;-5}".
1/1 mismatches
x[1]: ""
y[1]: "{a&lt;-5}"</failure>
    </testcase>
    <testcase time="0.026" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code"/>
    <testcase time="0.00600000000000001" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to &quot;a &lt;- 1&quot;. ('test-qenv_get_code.R:115:5')">get_code(q, names = "a") not identical to "a &lt;- 1".
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1"</failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to &quot;b &lt;- 2&quot;. ('test-qenv_get_code.R:119:5')">get_code(q, names = "b") not identical to "b &lt;- 2".
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0249999999999999" classname="qenv_get_code" name="extracts_the_code_without_downstream_usage"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_without_downstream_usage">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to &quot;a &lt;- 1&quot;. ('test-qenv_get_code.R:131:5')">get_code(q, names = "a") not identical to "a &lt;- 1".
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1"</failure>
    </testcase>
    <testcase time="0.028" classname="qenv_get_code" name="works_for_names_of_length_1"/>
    <testcase time="0.004" classname="qenv_get_code" name="works_for_names_of_length_1">
      <failure type="failure" message="get_code(q, names = c(&quot;a&quot;, &quot;b&quot;)) not identical to pasten(code). ('test-qenv_get_code.R:143:5')">get_code(q, names = c("a", "b")) not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- 2"</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="warns_if_binding_doesn_t_exist_in_code"/>
    <testcase time="0.0229999999999999" classname="qenv_get_code" name="does_not_fall_into_a_loop"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to pasten(code). ('test-qenv_get_code.R:166:5')">get_code(q, names = "a") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- a\nc &lt;- b\na &lt;- c"</failure>
    </testcase>
    <testcase time="0.014" classname="qenv_get_code" name="does_not_fall_into_a_loop"/>
    <testcase time="0.004" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code[1:2]). ('test-qenv_get_code.R:170:5')">get_code(q, names = "b") not identical to pasten(code[1:2]).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- a"</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="does_not_fall_into_a_loop"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;c&quot;) not identical to pasten(code[1:3]). ('test-qenv_get_code.R:174:5')">get_code(q, names = "c") not identical to pasten(code[1:3]).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- a\nc &lt;- b"</failure>
    </testcase>
    <testcase time="0.0299999999999998" classname="qenv_get_code" name="extracts_code_of_a_parent_binding_but_only_those_evaluated_before_coocurence"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_code_of_a_parent_binding_but_only_those_evaluated_before_coocurence">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(c(&quot;a &lt;- 1&quot;, &quot;b &lt;- a&quot;)). ('test-qenv_get_code.R:187:5')">get_code(q, names = "b") not identical to pasten(c("a &lt;- 1", "b &lt;- a")).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- a"</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="extracts_the_code_of_a_parent_binding_if_used_as_an_arg_in_a_function_call"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="extracts_the_code_of_a_parent_binding_if_used_as_an_arg_in_a_function_call">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(c(&quot;a &lt;- 1&quot;, &quot;b &lt;- identity(x = a)&quot;)). ('test-qenv_get_code.R:200:5')">get_code(q, names = "b") not identical to pasten(c("a &lt;- 1", "b &lt;- identity(x = a)")).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- identity(x = a)"</failure>
    </testcase>
    <testcase time="0.0270000000000001" classname="qenv_get_code" name="extracts_the_code_when_using_"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="extracts_the_code_when_using_">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(c(&quot;a &lt;- 1&quot;, &quot;b &lt;- a&quot;, &quot;b &lt;&lt;- b + 2&quot;)). ('test-qenv_get_code.R:213:5')">get_code(q, names = "b") not identical to pasten(c("a &lt;- 1", "b &lt;- a", "b &lt;&lt;- b + 2")).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- a\nb &lt;&lt;- b + 2"</failure>
    </testcase>
    <testcase time="0.0329999999999999" classname="qenv_get_code" name="detects_every_assign_calls_even_if_not_evaluated_if_there_is_only_one_assignment_in_this_line"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_every_assign_calls_even_if_not_evaluated_if_there_is_only_one_assignment_in_this_line">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code[2:3]). ('test-qenv_get_code.R:226:5')">get_code(q, names = "b") not identical to pasten(code[2:3]).
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2\neval(expression({b &lt;- b + 2}))"</failure>
    </testcase>
    <testcase time="0.0260000000000002" classname="qenv_get_code" name="returns_result_of_length_1_for_non_empty_input_and_deparse_FALSE"/>
    <testcase time="0.0209999999999999" classname="qenv_get_code" name="detects_calls_associated_with_object_if_calls_are_separated_by_"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="detects_calls_associated_with_object_if_calls_are_separated_by_">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to &quot;a &lt;- 1\na &lt;- a + 1&quot;. ('test-qenv_get_code.R:246:5')">get_code(q, names = "a") not identical to "a &lt;- 1\na &lt;- a + 1".
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\na &lt;- a + 1"</failure>
    </testcase>
    <testcase time="0.0300000000000002" classname="qenv_get_code" name="does_not_break_if_code_uses_quote_"/>
    <testcase time="0.00699999999999967" classname="qenv_get_code" name="does_not_break_if_code_uses_quote_">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to code[2]. ('test-qenv_get_code.R:259:5')">get_code(q, names = "x") not identical to code[2].
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 0"</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs">
      <failure type="failure" message="get_code(q, names = &quot;iris&quot;) not identical to pasten(code[c(1, 3)]). ('test-qenv_get_code.R:272:5')">get_code(q, names = "iris") not identical to pasten(code[c(1, 3)]).
1/1 mismatches
x[1]: ""
y[1]: "data(iris)\nnames(iris) &lt;- letters[1:5]"</failure>
    </testcase>
    <testcase time="0.0329999999999999" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs_and_influencers_are_both_on_lhs_and_rhs"/>
    <testcase time="0.004" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs_and_influencers_are_both_on_lhs_and_rhs">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to pasten(code). ('test-qenv_get_code.R:287:7')">get_code(q, names = "x") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 5\ny &lt;- length(x)\nnames(x)[y] &lt;- y"</failure>
    </testcase>
    <testcase time="0.0430000000000001" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code[c(2, 5)]). ('test-qenv_get_code.R:309:3')">get_code(q, names = "b") not identical to pasten(code[c(2, 5)]).
1/1 mismatches
x[1]: ""
y[1]: "assign('b', 5)\nb &lt;- b + 2"</failure>
    </testcase>
    <testcase time="0.0130000000000003" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;c&quot;) not identical to pasten(code[c(2, 3, 5, 6)]). ('test-qenv_get_code.R:313:3')">get_code(q, names = "c") not identical to pasten(code[c(2, 3, 5, 6)]).
1/1 mismatches
x[1]: ""
y[1]: "assign('b', 5)\nassign(value = 7, x = 'c')\nb &lt;- b + 2\nc &lt;- b"</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;d&quot;) not identical to pasten(c(&quot;assign(value = 15, x = \&quot;d\&quot;)&quot;, &quot;d &lt;- d * 2&quot;)). ('test-qenv_get_code.R:317:3')">get_code(q, names = "d") not identical to pasten(c("assign(value = 15, x = \"d\")", "d &lt;- d * 2")).
1/1 mismatches
x[1]: ""
y[1]: "assign(value = 15, x = \"d\")\nd &lt;- d * 2"</failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_variable">
      <skipped message="Reason: We will not resolve this, as this requires code evaluation. ('test-qenv_get_code.R:324:3')"/>
    </testcase>
    <testcase time="0.0459999999999998" classname="qenv_get_code" name="works_for_assign_detection_no_matter_how_many_parametrers_were_provided_in_assignq_"/>
    <testcase time="0.004" classname="qenv_get_code" name="works_for_assign_detection_no_matter_how_many_parametrers_were_provided_in_assignq_">
      <failure type="failure" message="get_code(q, names = &quot;y&quot;) not identical to pasten(code). ('test-qenv_get_code.R:348:3')">get_code(q, names = "y") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 1\nassign(\"x\", 0, envir = environment())\nassign(inherits = FALSE,
y[1]:  immediate = TRUE, \"z\", 5, envir = environment())\ny &lt;- x + z\ny &lt;- x"</failure>
    </testcase>
    <testcase time="0.0340000000000003" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator">
      <failure type="failure" message="get_code(q, names = &quot;y&quot;) not identical to pasten(code). ('test-qenv_get_code.R:364:3')">get_code(q, names = "y") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 1\n`&lt;-`(y,x)"</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator">
      <failure type="failure" message="get_code(q2, names = &quot;y&quot;) not identical to pasten(code2). ('test-qenv_get_code.R:368:3')">get_code(q2, names = "y") not identical to pasten(code2).
1/1 mismatches
x[1]: ""
y[1]: "`&lt;-`(y, `&lt;-`(x, 2))"</failure>
    </testcase>
    <testcase time="0.0299999999999998" classname="qenv_get_code" name="get_code_does_not_break_if_linksto_is_put_in_the_last_line"/>
    <testcase time="0.004" classname="qenv_get_code" name="get_code_does_not_break_if_linksto_is_put_in_the_last_line">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to pasten(code). ('test-qenv_get_code.R:387:3')">get_code(q, names = "x") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "expr &lt;- quote(x &lt;- x + 1)\nx &lt;- 0\neval(expr) #@linksto x"</failure>
    </testcase>
    <testcase time="0.0270000000000001" classname="qenv_get_code" name="_linksto_makes_a_line_being_returned_for_an_affected_binding"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="_linksto_makes_a_line_being_returned_for_an_affected_binding">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(c(&quot;a &lt;- 1 # @linksto b&quot;, &quot;  b &lt;- 2&quot;)). ('test-qenv_get_code.R:398:3')">get_code(q, names = "b") not identical to pasten(c("a &lt;- 1 # @linksto b", "  b &lt;- 2")).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1 # @linksto b\n  b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_get_code" name="_linksto_returns_the_line_for_an_affected_binding_even_if_the_object_did_not_exist_in_the_same_iteration_of_eval_code"/>
    <testcase time="0.00700000000000012" classname="qenv_get_code" name="_linksto_returns_the_line_for_an_affected_binding_even_if_the_object_did_not_exist_in_the_same_iteration_of_eval_code">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code). ('test-qenv_get_code.R:413:5')">get_code(q, names = "b") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1 # @linksto b\nb &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto"/>
    <testcase time="0.004" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to pasten(code[1:3]). ('test-qenv_get_code.R:430:5')">get_code(q, names = "a") not identical to pasten(code[1:3]).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- 2 # @linksto a\na &lt;- a + 1"</failure>
    </testcase>
    <testcase time="0.0139999999999998" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto"/>
    <testcase time="0.00600000000000023" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code[c(2, 4)]). ('test-qenv_get_code.R:434:5')">get_code(q, names = "b") not identical to pasten(code[c(2, 4)]).
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2 # @linksto a\nb &lt;- b + 1"</failure>
    </testcase>
    <testcase time="0.0349999999999997" classname="qenv_get_code" name="_linksto_gets_extracted_if_it_s_a_side_effect_on_a_dependent_object_even_of_a_dependent_object_"/>
    <testcase time="0.004" classname="qenv_get_code" name="_linksto_gets_extracted_if_it_s_a_side_effect_on_a_dependent_object_even_of_a_dependent_object_">
      <failure type="failure" message="get_code(q, names = &quot;classes&quot;) not identical to pasten(code). ('test-qenv_get_code.R:451:5')">get_code(q, names = "classes") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "iris[1:5, ] -&gt; iris2\niris_head &lt;- head(iris) # @linksto iris3\niris3 &lt;- 
y[1]: iris_head[1, ] # @linksto iris2\nclasses &lt;- lapply(iris2, class)"</failure>
    </testcase>
    <testcase time="0.0300000000000002" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition"/>
    <testcase time="0.004" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[1]. ('test-qenv_get_code.R:466:3')">get_code(q, names = "b") not identical to code[1].
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to code[2]. ('test-qenv_get_code.R:470:3')">get_code(q, names = "foo") not identical to code[2].
1/1 mismatches
x[1]: ""
y[1]: "foo &lt;- function(b) { b &lt;- b + 2 }"</failure>
    </testcase>
    <testcase time="0.0539999999999998" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it"/>
    <testcase time="0.00800000000000001" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[1]. ('test-qenv_get_code.R:482:3')">get_code(q, names = "b") not identical to code[1].
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0190000000000001" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to code[2]. ('test-qenv_get_code.R:486:3')">get_code(q, names = "foo") not identical to code[2].
1/1 mismatches
x[1]: ""
y[1]: "foo &lt;- function(b) { function(c) {b &lt;- c + 2 }}"</failure>
    </testcase>
    <testcase time="0.0380000000000003" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code[c(1, 3)]). ('test-qenv_get_code.R:500:3')">get_code(q, names = "b") not identical to pasten(code[c(1, 3)]).
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2\nb &lt;- b + 1"</failure>
    </testcase>
    <testcase time="0.0140000000000002" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions"/>
    <testcase time="0.004" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to code[2]. ('test-qenv_get_code.R:504:3')">get_code(q, names = "foo") not identical to code[2].
1/1 mismatches
x[1]: ""
y[1]: "foo &lt;- function(b) { function(c) {b &lt;- c + 2 }}"</failure>
    </testcase>
    <testcase time="0.0439999999999996" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_in_lapply"/>
    <testcase time="0.004" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_in_lapply">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to &quot;x &lt;- 1&quot;. ('test-qenv_get_code.R:519:3')">get_code(q, names = "x") not identical to "x &lt;- 1".
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 1"</failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="qenv_get_code" name="does_not_ignore_occurrence_in_function_body_if_object_exsits_in_env">
      <skipped message="Reason: This is not urgent and can be ommitted with @linksto tag. ('test-qenv_get_code.R:526:3')"/>
    </testcase>
    <testcase time="0.0270000000000001" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to code[2]. ('test-qenv_get_code.R:546:3')">get_code(q, names = "foo") not identical to code[2].
1/1 mismatches
x[1]: ""
y[1]: "foo &lt;- function(b) b &lt;- b + 2"</failure>
    </testcase>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets"/>
    <testcase time="0.00600000000000023" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[1]. ('test-qenv_get_code.R:550:3')">get_code(q, names = "b") not identical to code[1].
1/1 mismatches
x[1]: ""
y[1]: "b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0339999999999998" classname="qenv_get_code" name="detects_occurrence_of_the_function_object"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_occurrence_of_the_function_object">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code). ('test-qenv_get_code.R:564:3')">get_code(q, names = "b") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- 2\nfoo &lt;- function(b) { b &lt;- b + 2 }\nb &lt;- foo(a)"</failure>
    </testcase>
    <testcase time="0.032" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_when_a_formal_is_named_the_same_as_a_function"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_when_a_formal_is_named_the_same_as_a_function">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to pasten(code). ('test-qenv_get_code.R:577:3')">get_code(q, names = "a") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- 1\nfoo &lt;- function(foo = 1) 'text'\na &lt;- foo(x)"</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_with_a_linksto_usage"/>
    <testcase time="0.00700000000000012" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_with_a_linksto_usage">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to pasten(code[1:2]). ('test-qenv_get_code.R:594:3')">get_code(q, names = "x") not identical to pasten(code[1:2]).
1/1 mismatches
x[1]: ""
y[1]: "\n        foo &lt;- function() {\n          env &lt;- parent.frame()\n         
y[1]:  env$x &lt;- 0\n        }\nfoo() # @linksto x"</failure>
    </testcase>
    <testcase time="0.0419999999999998" classname="qenv_get_code" name="objects_in_for_loop_are_extracted_if_passed_as_one_character"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="objects_in_for_loop_are_extracted_if_passed_as_one_character">
      <failure type="failure" message="get_code(q, names = &quot;output&quot;) not identical to gsub(&quot;\n    some_other_dataset &lt;- mtcars\n&quot;, &quot;&quot;, code, fixed = TRUE). ('test-qenv_get_code.R:615:3')">get_code(q, names = "output") not identical to gsub("\n    some_other_dataset &lt;- mtcars\n", "", code, fixed = TRUE).
1/1 mismatches
x[1]: ""
y[1]: "    original_dataset &lt;- iris[, 1:4]\n    count &lt;- 1\n    for (x in colnam
y[1]: es(original_dataset)) {\n      original_dataset[, x] &lt;- original_dataset[,
y[1]:  x] * 2\n      count &lt;- count + 1\n    }\n    output &lt;- rlang::list2(x = o
y[1]: riginal_dataset)\n  "</failure>
    </testcase>
    <testcase time="0.04" classname="qenv_get_code" name="objects_in_for_loop_are_extracted_if_passed_as_separate_calls"/>
    <testcase time="0.004" classname="qenv_get_code" name="objects_in_for_loop_are_extracted_if_passed_as_separate_calls">
      <failure type="failure" message="strsplit(get_code(q, names = &quot;b&quot;), &quot;\n&quot;)[[1]] (`actual`) and c(...) (`expected`) don't have the same values. ('test-qenv_get_code.R:633:3')">strsplit(get_code(q, names = "b"), "\n")[[1]] (`actual`) and c(...) (`expected`) don't have the same values.
* Only in `expected`: "a &lt;- 1", "b &lt;- 2", "for (x in c(1, 2)) {", "    b &lt;- a", "    b &lt;- b + a + 1", "    b &lt;- b + 3", "}"
</failure>
    </testcase>
    <testcase time="0.0430000000000001" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.004" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to code[1]. ('test-qenv_get_code.R:658:3')">get_code(q, names = "x") not identical to code[1].
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- data.frame(a = 1:3)"</failure>
    </testcase>
    <testcase time="0.0139999999999998" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.00600000000000023" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to pasten(code). ('test-qenv_get_code.R:662:3')">get_code(q, names = "a") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "x &lt;- data.frame(a = 1:3)\na &lt;- data.frame(y = 1:3)\na$x &lt;- a$y\na$x &lt;- a$
y[1]: x + 2\na$x &lt;- x$a"</failure>
    </testcase>
    <testcase time="0.0299999999999998" classname="qenv_get_code" name="detects_cooccurrence_properly_even_if_all_objects_are_on_lhs"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_cooccurrence_properly_even_if_all_objects_are_on_lhs">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to pasten(code). ('test-qenv_get_code.R:675:3')">get_code(q, names = "b") not identical to pasten(code).
1/1 mismatches
x[1]: ""
y[1]: "a &lt;- 1\nb &lt;- list(c = 2)\nb[[a]] &lt;- 3"</failure>
    </testcase>
    <testcase time="0.109" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.00300000000000011" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.183" classname="qenv_get_code" name="library_and_require_are_always_returned"/>
    <testcase time="0.00500000000000034" classname="qenv_get_code" name="library_and_require_are_always_returned">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to pasten(code[c(2, 3, 4)]). ('test-qenv_get_code.R:733:3')">get_code(q, names = "x") not identical to pasten(code[c(2, 3, 4)]).
1/1 mismatches
x[1]: ""
y[1]: "require(dplyr)\nlibrary(lifecycle)\nx &lt;- 5"</failure>
    </testcase>
    <testcase time="0.04" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_is"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_is">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to pasten(code[-1]). ('test-qenv_get_code.R:751:3')">get_code(q, names = "x") not identical to pasten(code[-1]).
1/1 mismatches
x[1]: ""
y[1]: "require(dplyr)\nlibrary(lifecycle)\ndata(iris, envir = environment())\nx 
y[1]: &lt;- iris"</failure>
    </testcase>
    <testcase time="0.036" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_a_character"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_a_character">
      <failure type="failure" message="get_code(q, names = &quot;z&quot;) not identical to pasten(code[-1]). ('test-qenv_get_code.R:766:3')">get_code(q, names = "z") not identical to pasten(code[-1]).
1/1 mismatches
x[1]: ""
y[1]: "require(dplyr)\nlibrary(lifecycle)\ndata('mtcars')\nz &lt;- mtcars"</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code"/>
    <testcase time="0.004" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code">
      <failure type="failure" message="get_code(td, names = &quot;%cbind%&quot;) not identical to &quot;`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)&quot;. ('test-qenv_get_code.R:783:5')">get_code(td, names = "%cbind%") not identical to "`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)".
1/1 mismatches
x[1]: ""
y[1]: "`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)"</failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code">
      <failure type="failure" message="get_code(td, names = &quot;`%cbind%`&quot;) not identical to &quot;`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)&quot;. ('test-qenv_get_code.R:798:5')">get_code(td, names = "`%cbind%`") not identical to "`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)".
1/1 mismatches
x[1]: ""
y[1]: "`%cbind%` &lt;- function(lhs, rhs) cbind(lhs, rhs)"</failure>
    </testcase>
    <testcase time="0.032" classname="qenv_get_code" name="starting_with_underscore_is_detected_in_code_dependency"/>
    <testcase time="0.00500000000000034" classname="qenv_get_code" name="starting_with_underscore_is_detected_in_code_dependency">
      <failure type="failure" message="get_code(td, names = &quot;iris_ds&quot;) not identical to paste(...). ('test-qenv_get_code.R:813:5')">get_code(td, names = "iris_ds") not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "`_add_column_` &lt;- function(lhs, rhs) cbind(lhs, rhs)\niris_ds &lt;- `_add_co
y[1]: lumn_`(iris, data.frame(new_col = \"new column\"))"</failure>
    </testcase>
    <testcase time="0.0319999999999996" classname="qenv_get_code" name="with_space_character_is_detected_in_code_dependency"/>
    <testcase time="0.00500000000000034" classname="qenv_get_code" name="with_space_character_is_detected_in_code_dependency">
      <failure type="failure" message="get_code(td, names = &quot;iris_ds&quot;) not identical to paste(...). ('test-qenv_get_code.R:834:5')">get_code(td, names = "iris_ds") not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "`add column` &lt;- function(lhs, rhs) cbind(lhs, rhs)\niris_ds &lt;- `add colum
y[1]: n`(iris, data.frame(new_col = \"new column\"))"</failure>
    </testcase>
    <testcase time="0.0389999999999997" classname="qenv_get_code" name="without_special_characters_is_cleaned_and_detected_in_code_dependency"/>
    <testcase time="0.00500000000000034" classname="qenv_get_code" name="without_special_characters_is_cleaned_and_detected_in_code_dependency">
      <failure type="failure" message="get_code(td, names = &quot;iris_ds&quot;) not identical to paste(...). ('test-qenv_get_code.R:855:5')">get_code(td, names = "iris_ds") not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "add_column &lt;- function(lhs, rhs) cbind(lhs, rhs)\niris_ds &lt;- add_column(i
y[1]: ris, data.frame(new_col = \"new column\"))"</failure>
    </testcase>
    <testcase time="0.0339999999999998" classname="qenv_get_code" name="with_non_native_pipe_used_as_function_is_detected_code_dependency"/>
    <testcase time="0.00600000000000023" classname="qenv_get_code" name="with_non_native_pipe_used_as_function_is_detected_code_dependency">
      <failure type="failure" message="get_code(td, names = &quot;iris_ds&quot;) not identical to paste(...). ('test-qenv_get_code.R:878:5')">get_code(td, names = "iris_ds") not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "`%add_column%` &lt;- function(lhs, rhs) cbind(lhs, rhs)\niris_ds &lt;- iris %ad
y[1]: d_column% data.frame(new_col = \"new column\")"</failure>
    </testcase>
    <testcase time="0.0309999999999997" classname="qenv_get_code" name="with_non_native_pipe_is_detected_code_dependency"/>
    <testcase time="0.00800000000000001" classname="qenv_get_code" name="with_non_native_pipe_is_detected_code_dependency">
      <failure type="failure" message="get_code(td, names = &quot;iris_ds&quot;) not identical to paste(...). ('test-qenv_get_code.R:901:5')">get_code(td, names = "iris_ds") not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "`%add_column%` &lt;- function(lhs, rhs) cbind(lhs, rhs)\niris_ds &lt;- iris %ad
y[1]: d_column% data.frame(new_col = \"new column\")"</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_get_code" name="get_code_raises_warning_for_missing_names"/>
    <testcase time="0.00200000000000022" classname="qenv_get_code" name="get_code_raises_warning_for_missing_names"/>
    <testcase time="0.0249999999999999" classname="qenv_get_code" name="comments_are_preserved_in_the_output_code"/>
    <testcase time="0.0209999999999999" classname="qenv_get_code" name="original_formatting_and_comments_are_preserved_when_expression_has_a_srcref"/>
    <testcase time="0.0249999999999999" classname="qenv_get_code" name="extracting_code_doesn_t_fail_when_lhs_contains_two_or_more_symbols_occurring_in_rhs">
      <failure type="failure" message="`get_code(q, names = &quot;l&quot;)` produced warnings. ('test-qenv_get_code.R:959:3')">`get_code(q, names = "l")` produced warnings.</failure>
    </testcase>
  </testsuite>
  <testsuite name="qenv_get_messages" timestamp="2025-06-24T09:31:51Z" hostname="201818ab1a69" tests="7" skipped="0" failures="0" errors="0" time="0.104">
    <testcase time="0.0270000000000001" classname="qenv_get_messages" name="get_messages_accepts_a_qenv_object_and_returns_character"/>
    <testcase time="0.012" classname="qenv_get_messages" name="get_messages_accepts_a_qenv.error_object_and_returns_NULL"/>
    <testcase time="0.00399999999999956" classname="qenv_get_messages" name="get_messages_accepts_a_NULL_object_and_returns_NULL"/>
    <testcase time="0.0110000000000001" classname="qenv_get_messages" name="get_messages_accepts_a_qenv_object_with_no_message_and_returns_NULL"/>
    <testcase time="0.016" classname="qenv_get_messages" name="get_messages_accepts_a_qenv_object_with_2_messages"/>
    <testcase time="0.0179999999999998" classname="qenv_get_messages" name="get_messages_accepts_a_qenv_object_with_a_single_eval_code_returning_2_messages"/>
    <testcase time="0.016" classname="qenv_get_messages" name="get_messages_accepts_a_qenv_object_with_1_message_eval_code_and_1_no_message_eval_code"/>
  </testsuite>
  <testsuite name="qenv_get_var" timestamp="2025-06-24T09:31:51Z" hostname="201818ab1a69" tests="17" skipped="0" failures="0" errors="0" time="0.158">
    <testcase time="0.0230000000000006" classname="qenv_get_var" name="get_var_and_return_error_if_object_is_qenv.error"/>
    <testcase time="0.00799999999999912" classname="qenv_get_var" name="get_var_and_return_error_if_object_is_qenv.error"/>
    <testcase time="0.00400000000000045" classname="qenv_get_var" name="get_var_and_return_error_if_object_is_qenv.error"/>
    <testcase time="0.0330000000000004" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.0309999999999997" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.00100000000000033" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.00199999999999978" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.0199999999999996" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00200000000000067" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00199999999999978" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00600000000000023" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00800000000000001" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_parent_environment_s_"/>
    <testcase time="0.00299999999999923" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_parent_environment_s_"/>
    <testcase time="0.00300000000000011" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_parent_environment_s_"/>
    <testcase time="0.00700000000000056" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_.GlobalEnv"/>
    <testcase time="0.00299999999999923" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_.GlobalEnv"/>
    <testcase time="0.00200000000000067" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_.GlobalEnv"/>
  </testsuite>
  <testsuite name="qenv_get_warnings" timestamp="2025-06-24T09:31:51Z" hostname="201818ab1a69" tests="7" skipped="0" failures="0" errors="0" time="0.096">
    <testcase time="0.0139999999999993" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_and_returns_character"/>
    <testcase time="0.0120000000000005" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv.error_object_and_returns_NULL"/>
    <testcase time="0.00800000000000001" classname="qenv_get_warnings" name="get_warnings_accepts_a_NULL_object_and_returns_NULL"/>
    <testcase time="0.0119999999999996" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_no_warning_and_returns_NULL"/>
    <testcase time="0.016" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_2_warnings"/>
    <testcase time="0.0140000000000002" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_a_single_eval_code_returning_2_warnings"/>
    <testcase time="0.0200000000000005" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_1_warning_eval_code_and_1_no_warning_eval_code"/>
  </testsuite>
  <testsuite name="qenv_join" timestamp="2025-06-24T09:31:51Z" hostname="201818ab1a69" tests="22" skipped="0" failures="0" errors="0" time="0.304">
    <testcase time="0.0129999999999999" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.000999999999999446" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.0170000000000003" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.0219999999999994" classname="qenv_join" name="Joined_qenv_does_not_duplicate_common_code"/>
    <testcase time="0.00200000000000067" classname="qenv_join" name="Joined_qenv_does_not_duplicate_common_code"/>
    <testcase time="0.0229999999999997" classname="qenv_join" name="Not_able_to_join_two_qenvs_if_any_of_the_shared_objects_changed"/>
    <testcase time="0.0270000000000001" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.00199999999999978" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.0289999999999999" classname="qenv_join" name="Not_possible_to_join_qenvs_which_share_some_code_when_one_of_the_shared_object_was_modified"/>
    <testcase time="0.0170000000000003" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00199999999999978" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.0199999999999996" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.0300000000000002" classname="qenv_join" name="qenv_objects_aren_t_mergeable_if_they_share_common_qenv_elements_proceeded_with_some_other_code"/>
    <testcase time="0.0279999999999996" classname="qenv_join" name="qenv_objects_are_not_mergable_if_they_have_multiple_common_streaks"/>
    <testcase time="0.0230000000000006" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.000999999999999446" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00200000000000067" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.000999999999999446" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.0179999999999998" classname="qenv_join" name="Joining_two_independent_qenvs_with_warnings_results_in_object_having_combined_warnings"/>
    <testcase time="0.024" classname="qenv_join" name="Joining_two_independent_qenvs_with_messages_results_in_object_having_combined_messages"/>
  </testsuite>
  <testsuite name="qenv_within" timestamp="2025-06-24T09:31:51Z" hostname="201818ab1a69" tests="18" skipped="0" failures="0" errors="0" time="0.247">
    <testcase time="0.0140000000000002" classname="qenv_within" name="simple_and_compound_expressions_are_evaluated"/>
    <testcase time="0.00699999999999967" classname="qenv_within" name="simple_and_compound_expressions_are_evaluated"/>
    <testcase time="0.0170000000000003" classname="qenv_within" name="multiline_expressions_are_evaluated"/>
    <testcase time="0.0270000000000001" classname="qenv_within" name="styling_of_input_code_does_not_impact_evaluation_results"/>
    <testcase time="0.0380000000000003" classname="qenv_within" name="styling_of_input_code_does_not_impact_evaluation_results"/>
    <testcase time="0.0109999999999992" classname="qenv_within" name="within.qenv_empty_call_doesn_t_change_qenv_object"/>
    <testcase time="0.0190000000000001" classname="qenv_within" name="within.qenv_renturns_a_qenv_where_.xData_is_a_deep_copy_of_that_in_data_"/>
    <testcase time="0.00300000000000011" classname="qenv_within" name="within.qenv_renturns_a_qenv_where_.xData_is_a_deep_copy_of_that_in_data_"/>
    <testcase time="0.016" classname="qenv_within" name="within.qenv_renturns_qenv.error_even_if_evaluation_raises_error"/>
    <testcase time="0.00100000000000033" classname="qenv_within" name="within.qenv_renturns_qenv.error_even_if_evaluation_raises_error"/>
    <testcase time="0.0119999999999996" classname="qenv_within" name="external_values_can_be_injected_into_expressions_through_..._"/>
    <testcase time="0.0150000000000006" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00499999999999989" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00800000000000001" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00199999999999978" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.0149999999999997" classname="qenv_within" name="within_run_on_qenv.error_returns_the_qenv.error_as_is"/>
    <testcase time="0.0270000000000001" classname="qenv_within" name="multiple_expressions"/>
    <testcase time="0.00999999999999979" classname="qenv_within" name="Code_executed_with_integer_shorthand_1L_is_the_same_as_original"/>
  </testsuite>
  <testsuite name="utils-get_code_dependency" timestamp="2025-06-24T09:31:52Z" hostname="201818ab1a69" tests="18" skipped="0" failures="9" errors="0" time="0.262">
    <testcase time="0.0190000000000001" classname="utils_get_code_dependency" name="detects_assign_function"/>
    <testcase time="0.00400000000000045" classname="utils_get_code_dependency" name="detects_assign_function">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:12:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    assign(\"var1\", iris)\n}"</failure>
    </testcase>
    <testcase time="0.0300000000000002" classname="utils_get_code_dependency" name="detects_"/>
    <testcase time="0.00399999999999956" classname="utils_get_code_dependency" name="detects_">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:25:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n}"</failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="utils_get_code_dependency" name="detects_"/>
    <testcase time="0.00400000000000045" classname="utils_get_code_dependency" name="detects_">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:39:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n}"</failure>
    </testcase>
    <testcase time="0.0279999999999996" classname="utils_get_code_dependency" name="detects_assign_function"/>
    <testcase time="0.00699999999999967" classname="utils_get_code_dependency" name="detects_assign_function">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:55:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    assign(\"var1\", iris)\n    assign(\"var2\", mtcar
y[1]: s)\n}"</failure>
    </testcase>
    <testcase time="0.0150000000000006" classname="utils_get_code_dependency" name="detects_assign_function"/>
    <testcase time="0.00399999999999956" classname="utils_get_code_dependency" name="detects_assign_function">
      <failure type="failure" message="get_code(td, names = &quot;var2&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:56:5')">get_code(td, names = "var2") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    assign(\"var1\", iris)\n    assign(\"var2\", mtcar
y[1]: s)\n}"</failure>
    </testcase>
    <testcase time="0.0310000000000006" classname="utils_get_code_dependency" name="detects_function"/>
    <testcase time="0.00499999999999989" classname="utils_get_code_dependency" name="detects_function">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:70:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n    var2 &lt;- mtcars\n}"</failure>
    </testcase>
    <testcase time="0.0140000000000002" classname="utils_get_code_dependency" name="detects_function"/>
    <testcase time="0.00699999999999967" classname="utils_get_code_dependency" name="detects_function">
      <failure type="failure" message="get_code(td, names = &quot;var2&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:71:5')">get_code(td, names = "var2") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n    var2 &lt;- mtcars\n}"</failure>
    </testcase>
    <testcase time="0.0380000000000003" classname="utils_get_code_dependency" name="detects_function"/>
    <testcase time="0.00399999999999956" classname="utils_get_code_dependency" name="detects_function">
      <failure type="failure" message="get_code(td, names = &quot;var1&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:85:5')">get_code(td, names = "var1") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n    var2 &lt;- mtcars\n}"</failure>
    </testcase>
    <testcase time="0.0140000000000002" classname="utils_get_code_dependency" name="detects_function"/>
    <testcase time="0.00499999999999989" classname="utils_get_code_dependency" name="detects_function">
      <failure type="failure" message="get_code(td, names = &quot;var2&quot;) not equal to `code_source`. ('test-utils-get_code_dependency.R:86:5')">get_code(td, names = "var2") not equal to `code_source`.
1/1 mismatches
x[1]: ""
y[1]: "for (i in 1:10) {\n    var1 &lt;- iris\n    var2 &lt;- mtcars\n}"</failure>
    </testcase>
  </testsuite>
  <testsuite name="utils" timestamp="2025-06-24T09:31:52Z" hostname="201818ab1a69" tests="12" skipped="0" failures="0" errors="0" time="0.048">
    <testcase time="0.0190000000000001" classname="utils" name="dev_suppress_function_supress_printing_plot_on_IDE"/>
    <testcase time="0.00199999999999978" classname="utils" name="dev_suppress_function_supress_printing_plot_on_IDE"/>
    <testcase time="0.00499999999999989" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00300000000000011" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00199999999999978" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00300000000000011" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00499999999999989" classname="utils" name="lang2calls_returns_list_of_calls_given_a_list_of_language_objects"/>
    <testcase time="0.00300000000000011" classname="utils" name="lang2calls_returns_list_of_calls_given_a_list_of_language_objects"/>
    <testcase time="0.00300000000000011" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.00100000000000033" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.000999999999999446" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.00100000000000033" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
  </testsuite>
</testsuites>
