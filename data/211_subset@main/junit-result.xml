<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="qenv_concat" timestamp="2024-10-30T12:17:52Z" hostname="9196633e295a" tests="12" skipped="0" failures="0" errors="0" time="0.177">
    <testcase time="0.04" classname="qenv_concat" name="Concatenate_two_identical_qenvs_outputs"/>
    <testcase time="0.056" classname="qenv_concat" name="Concatenate_two_identical_qenvs_outputs"/>
    <testcase time="0.02" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.001" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.031" classname="qenv_concat" name="Concatenate_qenvs_results_with_the_same_variable_the_RHS_has_priority"/>
    <testcase time="0.00700000000000001" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.002" classname="qenv_concat" name="Concatenate_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00700000000000001" classname="qenv_concat" name="Concatenate_two_independent_qenvs_with_warnings_results_in_object_having_combined_warnings"/>
    <testcase time="0.00700000000000001" classname="qenv_concat" name="Concatenate_two_independent_qenvs_with_messages_results_in_object_having_combined_messages"/>
  </testsuite>
  <testsuite name="qenv_constructor" timestamp="2024-10-30T12:17:52Z" hostname="9196633e295a" tests="8" skipped="0" failures="0" errors="0" time="0.036">
    <testcase time="0.014" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.001" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.002" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.001" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.001" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.005" classname="qenv_constructor" name="constructor_returns_qenv"/>
    <testcase time="0.003" classname="qenv_constructor" name="parent_of_qenv_environment_is_the_parent_of_.GlobalEnv"/>
    <testcase time="0.00900000000000001" classname="qenv_constructor" name="parent_of_qenv_environment_is_locked"/>
  </testsuite>
  <testsuite name="qenv_eval_code" timestamp="2024-10-30T12:17:52Z" hostname="9196633e295a" tests="26" skipped="0" failures="1" errors="0" time="0.201">
    <testcase time="0.016" classname="qenv_eval_code" name="eval_code_evaluates_the_code_in_the_qenvs_environment"/>
    <testcase time="0.00499999999999989" classname="qenv_eval_code" name="eval_code_doesn_t_have_access_to_environment_where_it_s_called"/>
    <testcase time="0.004" classname="qenv_eval_code" name="_env_in_qenv_is_always_a_sibling_of_.GlobalEnv"/>
    <testcase time="0.002" classname="qenv_eval_code" name="_env_in_qenv_is_always_a_sibling_of_.GlobalEnv"/>
    <testcase time="0.002" classname="qenv_eval_code" name="_env_in_qenv_is_always_a_sibling_of_.GlobalEnv"/>
    <testcase time="0.016" classname="qenv_eval_code" name="getting_object_from_the_package_namespace_works_even_if_library_in_the_same_call"/>
    <testcase time="0.004" classname="qenv_eval_code" name="eval_code_works_with_character"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_works_with_character"/>
    <testcase time="0.004" classname="qenv_eval_code" name="eval_code_works_with_expression"/>
    <testcase time="0.002" classname="qenv_eval_code" name="eval_code_works_with_expression"/>
    <testcase time="0.004" classname="qenv_eval_code" name="eval_code_works_with_quoted"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_works_with_quoted"/>
    <testcase time="0.005" classname="qenv_eval_code" name="eval_code_works_with_quoted_code_block"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_works_with_quoted_code_block"/>
    <testcase time="0.0730000000000001" classname="qenv_eval_code" name="eval_code_fails_with_unquoted_expression"/>
    <testcase time="0.0099999999999999" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.002" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.001" classname="qenv_eval_code" name="an_error_when_calling_eval_code_returns_a_qenv.error_object_which_has_message_and_trace"/>
    <testcase time="0.00700000000000001" classname="qenv_eval_code" name="a_warning_when_calling_eval_code_returns_a_qenv_object_which_has_warnings"/>
    <testcase time="0.001" classname="qenv_eval_code" name="a_warning_when_calling_eval_code_returns_a_qenv_object_which_has_warnings"/>
    <testcase time="0.00800000000000001" classname="qenv_eval_code" name="eval_code_with_a_vector_of_code_produces_one_warning_element_per_code_element">
      <failure type="failure" message="c(&quot;&quot;, &quot;&quot;, &quot;&gt; warn1\n&quot;) not equal to q@warnings. ('test-qenv_eval_code.R:106:3')">c("", "", "&gt; warn1\n") not equal to q@warnings.
1/3 mismatches
x[3]: "&gt; warn1\n"
y[3]: ""</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_eval_code" name="a_message_when_calling_eval_code_returns_a_qenv_object_which_has_messages"/>
    <testcase time="0.001" classname="qenv_eval_code" name="a_message_when_calling_eval_code_returns_a_qenv_object_which_has_messages"/>
    <testcase time="0.004" classname="qenv_eval_code" name="eval_code_returns_a_qenv_object_with_empty_messages_and_warnings_when_none_are_returned"/>
    <testcase time="0.001" classname="qenv_eval_code" name="eval_code_returns_a_qenv_object_with_empty_messages_and_warnings_when_none_are_returned"/>
    <testcase time="0.002" classname="qenv_eval_code" name="eval_code_returns_a_qenv_object_with_empty_messages_and_warnings_when_none_are_returned"/>
  </testsuite>
  <testsuite name="qenv_extract" timestamp="2024-10-30T12:17:52Z" hostname="9196633e295a" tests="7" skipped="0" failures="6" errors="0" time="0.114">
    <testcase time="0.017" classname="qenv_extract" name="_._extracts_proper_objects"/>
    <testcase time="0.012" classname="qenv_extract" name="_._extract_proper_code">
      <failure type="failure" message="qs@code not identical to c(&quot;x &lt;- 1&quot;, &quot;a &lt;- 1&quot;). ('test-qenv_extract.R:16:3')">qs@code not identical to c("x &lt;- 1", "a &lt;- 1").
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.026" classname="qenv_extract" name="_._preservers_comments_in_the_code">
      <failure type="failure" message="qs@code not identical to c(&quot;x &lt;- 1 #comment&quot;, &quot;a &lt;- 1&quot;). ('test-qenv_extract.R:27:3')">qs@code not identical to c("x &lt;- 1 #comment", "a &lt;- 1").
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.0249999999999999" classname="qenv_extract" name="_._extract_proper_elements_of_id_warnings_and_messages_fiels">
      <failure type="failure" message="qs@id not identical to q@id[c(1, 3)]. ('test-qenv_extract.R:40:3')">qs@id not identical to q@id[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.011" classname="qenv_extract" name="_._extract_proper_elements_of_id_warnings_and_messages_fiels">
      <failure type="failure" message="qs@code not identical to q@code[c(1, 3)]. ('test-qenv_extract.R:41:3')">qs@code not identical to q@code[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.011" classname="qenv_extract" name="_._extract_proper_elements_of_id_warnings_and_messages_fiels">
      <failure type="failure" message="qs@warnings not identical to q@warnings[c(1, 3)]. ('test-qenv_extract.R:42:3')">qs@warnings not identical to q@warnings[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.012" classname="qenv_extract" name="_._extract_proper_elements_of_id_warnings_and_messages_fiels">
      <failure type="failure" message="qs@messages not identical to q@messages[c(1, 3)]. ('test-qenv_extract.R:43:3')">qs@messages not identical to q@messages[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
  </testsuite>
  <testsuite name="qenv_get_code" timestamp="2024-10-30T12:17:52Z" hostname="9196633e295a" tests="99" skipped="2" failures="45" errors="2" time="1.385">
    <testcase time="0.02" classname="qenv_get_code" name="get_code_returns_code_character_by_default_of_qenv_object"/>
    <testcase time="0.00600000000000001" classname="qenv_get_code" name="get_code_handles_code_elements_being_code_blocks"/>
    <testcase time="0.005" classname="qenv_get_code" name="get_code_returns_expression_of_qenv_object_if_deparse_FALSE"/>
    <testcase time="0.00700000000000001" classname="qenv_get_code" name="get_code_called_with_qenv.error_returns_error_with_trace_in_error_message"/>
    <testcase time="0.001" classname="qenv_get_code" name="get_code_called_with_qenv.error_returns_error_with_trace_in_error_message"/>
    <testcase time="0.004" classname="qenv_get_code" name="handles_empty_code_slot"/>
    <testcase time="0.005" classname="qenv_get_code" name="handles_empty_code_slot">
      <error type="error" message="Error in `if (pd$token[1] == &quot;COMMENT&quot;) { ('test-qenv_get_code.R:56:3')">Error in `if (pd$token[1] == "COMMENT") {
    first_comment &lt;- 1:(which(pd$parent == 0)[1] - 1)
    pd_first_comment &lt;- pd[first_comment, ]
    pd &lt;- pd[-first_comment, ]
    n &lt;- nrow(pd_first_comment)
    first_comment_ids &lt;- data.frame(lines = c(pd_first_comment[1, 
        "line1"], pd_first_comment[n, "line2"]), cols = c(pd_first_comment[1, 
        "col1"], pd_first_comment[n, "col2"]))
} else {
    first_comment_ids &lt;- NULL
}`: missing value where TRUE/FALSE needed
Backtrace:
    ▆
 1. ├─testthat::expect_identical(...) at test-qenv_get_code.R:56:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. ├─teal.code::get_code(eval_code(qenv(), code = ""), names = "a")
 5. ├─teal.code::eval_code(qenv(), code = "")
 6. └─teal.code::eval_code(qenv(), code = "")
 7.   └─teal.code:::split_code(code)
 8.     └─teal.code:::get_line_ids(pd)</error>
    </testcase>
    <testcase time="0.028" classname="qenv_get_code" name="handles_the_code_without_symbols_on_rhs"/>
    <testcase time="0.00800000000000001" classname="qenv_get_code" name="handles_the_code_without_symbols_on_rhs">
      <failure type="failure" message="get_code(eval_code(qenv(), code), names = &quot;a&quot;) not identical to &quot;a &lt;- 5&quot;. ('test-qenv_get_code.R:69:3')">get_code(eval_code(qenv(), code), names = "a") not identical to "a &lt;- 5".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0199999999999999" classname="qenv_get_code" name="handles_the_code_included_in_curly_brackets">
      <failure type="failure" message="get_code(eval_code(qenv(), code), names = &quot;a&quot;) not identical to &quot;a &lt;- 5&quot;. ('test-qenv_get_code.R:78:3')">get_code(eval_code(qenv(), code), names = "a") not identical to "a &lt;- 5".
1/1 mismatches
x[1]: NA
y[1]: "a &lt;- 5"</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="handles_the_code_of_length_1_when_at_least_one_is_enclosed_in_curly_brackets">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to &quot;a &lt;- 5&quot;. ('test-qenv_get_code.R:88:3')">get_code(q, names = "a") not identical to "a &lt;- 5".
1/1 mismatches
x[1]: "a&lt;-5"
y[1]: "a &lt;- 5"</failure>
    </testcase>
    <testcase time="0.0180000000000001" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code"/>
    <testcase time="0.0069999999999999" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_of_a_binding_from_character_vector_containing_simple_code">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to &quot;b &lt;- 2&quot;. ('test-qenv_get_code.R:105:3')">get_code(q, names = "b") not identical to "b &lt;- 2".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="extracts_the_code_without_downstream_usage"/>
    <testcase time="0.01" classname="qenv_get_code" name="works_for_names_of_length_1"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="works_for_names_of_length_1">
      <failure type="failure" message="get_code(q, names = c(&quot;a&quot;, &quot;b&quot;)) not identical to `code`. ('test-qenv_get_code.R:129:3')">get_code(q, names = c("a", "b")) not identical to `code`.
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.0170000000000001" classname="qenv_get_code" name="warns_if_binding_doesn_t_exist_in_code"/>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to `code`. ('test-qenv_get_code.R:152:3')">get_code(q, names = "a") not identical to `code`.
Lengths differ: 1 is not 4</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="does_not_fall_into_a_loop"/>
    <testcase time="0.004" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[1:2]. ('test-qenv_get_code.R:156:3')">get_code(q, names = "b") not identical to code[1:2].
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="does_not_fall_into_a_loop"/>
    <testcase time="0.00700000000000012" classname="qenv_get_code" name="does_not_fall_into_a_loop">
      <failure type="failure" message="get_code(q, names = &quot;c&quot;) not identical to code[1:3]. ('test-qenv_get_code.R:160:3')">get_code(q, names = "c") not identical to code[1:3].
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.0189999999999999" classname="qenv_get_code" name="extracts_code_of_a_parent_binding_but_only_those_evaluated_before_coocurence"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="extracts_code_of_a_parent_binding_but_only_those_evaluated_before_coocurence">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;a &lt;- 1&quot;, &quot;b &lt;- a&quot;). ('test-qenv_get_code.R:174:3')">get_code(q, names = "b") not identical to c("a &lt;- 1", "b &lt;- a").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.0190000000000001" classname="qenv_get_code" name="extracts_the_code_of_a_parent_binding_if_used_as_an_arg_in_a_function_call"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_of_a_parent_binding_if_used_as_an_arg_in_a_function_call">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;a &lt;- 1&quot;, &quot;b &lt;- identity(x = a)&quot;). ('test-qenv_get_code.R:187:3')">get_code(q, names = "b") not identical to c("a &lt;- 1", "b &lt;- identity(x = a)").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.022" classname="qenv_get_code" name="extracts_the_code_when_using_"/>
    <testcase time="0.004" classname="qenv_get_code" name="extracts_the_code_when_using_">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;a &lt;- 1&quot;, &quot;b &lt;- a&quot;, &quot;b &lt;&lt;- b + 2&quot;). ('test-qenv_get_code.R:200:3')">get_code(q, names = "b") not identical to c("a &lt;- 1", "b &lt;- a", "b &lt;&lt;- b + 2").
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="detects_every_assign_calls_even_if_not_evaluated_if_there_is_only_one_assignment_in_this_line"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_every_assign_calls_even_if_not_evaluated_if_there_is_only_one_assignment_in_this_line">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;b &lt;- 2&quot;, &quot;eval(expression({\n    b &lt;- b + 2\n}))&quot;). ('test-qenv_get_code.R:213:3')">get_code(q, names = "b") not identical to c("b &lt;- 2", "eval(expression({\n    b &lt;- b + 2\n}))").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="returns_result_of_length_1_for_non_empty_input_and_deparse_FALSE"/>
    <testcase time="0.0069999999999999" classname="qenv_get_code" name="does_not_break_if_code_is_separated_by_">
      <error type="error" message="Error in `parse(text = code_split[[i]], keep.source = FALSE)`: &lt;text&gt;:1:18: unexpected symbol ('test-qenv_get_code.R:234:3')">Error in `parse(text = code_split[[i]], keep.source = FALSE)`: &lt;text&gt;:1:18: unexpected symbol
1: a &lt;- 1;a &lt;- a + 1a
                     ^
Backtrace:
    ▆
 1. ├─teal.code::eval_code(qenv(), code) at test-qenv_get_code.R:234:3
 2. └─teal.code::eval_code(qenv(), code)
 3.   └─base::parse(text = code_split[[i]], keep.source = FALSE)</error>
    </testcase>
    <testcase time="0.0329999999999999" classname="qenv_get_code" name="does_not_break_if_code_uses_quote_">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to code[2]. ('test-qenv_get_code.R:248:3')">get_code(q, names = "x") not identical to code[2].
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0310000000000001" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs">
      <failure type="failure" message="get_code(q, names = &quot;iris&quot;) not identical to code[c(1, 3)]. ('test-qenv_get_code.R:261:3')">get_code(q, names = "iris") not identical to code[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="does_not_break_if_object_is_used_in_a_function_on_lhs_and_influencers_are_both_on_lhs_and_rhs">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to `code`. ('test-qenv_get_code.R:276:5')">get_code(q, names = "x") not identical to `code`.
Lengths differ: 1 is not 3</failure>
    </testcase>
    <testcase time="0.0249999999999999" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.00600000000000001" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;assign(\&quot;b\&quot;, 5)&quot;, &quot;b &lt;- b + 2&quot;). ('test-qenv_get_code.R:296:3')">get_code(q, names = "b") not identical to c("assign(\"b\", 5)", "b &lt;- b + 2").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.018" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;c&quot;) not identical to c(...). ('test-qenv_get_code.R:300:3')">get_code(q, names = "c") not identical to c(...).
Lengths differ: 0 is not 4</failure>
    </testcase>
    <testcase time="0.0199999999999998" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_a_literal_string">
      <failure type="failure" message="get_code(q, names = &quot;d&quot;) not identical to c(&quot;assign(value = 15, x = \&quot;d\&quot;)&quot;, &quot;d &lt;- d * 2&quot;). ('test-qenv_get_code.R:309:3')">get_code(q, names = "d") not identical to c("assign(value = 15, x = \"d\")", "d &lt;- d * 2").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.0109999999999999" classname="qenv_get_code" name="extracts_the_code_for_assign_where_x_is_variable">
      <skipped message="Reason: We will not resolve this, as this requires code evaluation. ('test-qenv_get_code.R:316:3')"/>
    </testcase>
    <testcase time="0.0210000000000001" classname="qenv_get_code" name="works_for_assign_detection_no_matter_how_many_parametrers_were_provided_in_assignq_"/>
    <testcase time="0.004" classname="qenv_get_code" name="works_for_assign_detection_no_matter_how_many_parametrers_were_provided_in_assignq_">
      <failure type="failure" message="get_code(q, names = &quot;y&quot;) not identical to `code`. ('test-qenv_get_code.R:340:3')">get_code(q, names = "y") not identical to `code`.
Lengths differ: 0 is not 5</failure>
    </testcase>
    <testcase time="0.034" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator">
      <failure type="failure" message="get_code(q, names = &quot;y&quot;) not identical to c(code[1], &quot;y &lt;- x&quot;). ('test-qenv_get_code.R:356:3')">get_code(q, names = "y") not identical to c(code[1], "y &lt;- x").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="detects_function_usage_of_the_assignment_operator">
      <failure type="failure" message="get_code(q2, names = &quot;y&quot;) not identical to &quot;y &lt;- x &lt;- 2&quot;. ('test-qenv_get_code.R:360:3')">get_code(q2, names = "y") not identical to "y &lt;- x &lt;- 2".
1/1 mismatches
x[1]: "`&lt;-`(y, `&lt;-`(x, 2))"
y[1]: "y &lt;- x &lt;- 2"</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_get_code" name="get_code_does_not_break_if_linksto_is_put_in_the_last_line">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to `code`. ('test-qenv_get_code.R:379:3')">get_code(q, names = "x") not identical to `code`.
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="_linksto_makes_a_line_being_returned_for_an_affected_binding">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(&quot;a &lt;- 1 # @linksto b&quot;, &quot;b &lt;- 2&quot;). ('test-qenv_get_code.R:391:3')">get_code(q, names = "b") not identical to c("a &lt;- 1 # @linksto b", "b &lt;- 2").
2/2 mismatches
x[1]: "  a &lt;- 1 # @linksto b"
y[1]: "a &lt;- 1 # @linksto b"

x[2]: "  b &lt;- 2"
y[2]: "b &lt;- 2"</failure>
    </testcase>
    <testcase time="0.0189999999999999" classname="qenv_get_code" name="_linksto_returns_the_line_for_an_affected_binding_even_if_the_object_did_not_exist_in_the_same_iteration_of_eval_code"/>
    <testcase time="0.004" classname="qenv_get_code" name="_linksto_returns_the_line_for_an_affected_binding_even_if_the_object_did_not_exist_in_the_same_iteration_of_eval_code">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to `code`. ('test-qenv_get_code.R:406:5')">get_code(q, names = "b") not identical to `code`.
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.0230000000000001" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to code[1:3]. ('test-qenv_get_code.R:423:5')">get_code(q, names = "a") not identical to code[1:3].
Lengths differ: 1 is not 3</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="lines_affecting_parent_evaluated_after_co_occurrence_are_not_included_in_output_when_using_linksto">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[c(2, 4)]. ('test-qenv_get_code.R:427:5')">get_code(q, names = "b") not identical to code[c(2, 4)].
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_get_code" name="_linksto_gets_extracted_if_it_s_a_side_effect_on_a_dependent_object_even_of_a_dependent_object_"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="_linksto_gets_extracted_if_it_s_a_side_effect_on_a_dependent_object_even_of_a_dependent_object_">
      <failure type="failure" message="get_code(q, names = &quot;classes&quot;) not identical to c(&quot;iris2 &lt;- iris[1:5, ]&quot;, code[2:4]). ('test-qenv_get_code.R:444:5')">get_code(q, names = "classes") not identical to c("iris2 &lt;- iris[1:5, ]", code[2:4]).
Lengths differ: 0 is not 4</failure>
    </testcase>
    <testcase time="0.0169999999999999" classname="qenv_get_code" name="comments_fall_into_proper_calls">
      <failure type="failure" message="get_code(q) not identical to c(...). ('test-qenv_get_code.R:468:3')">get_code(q) not identical to c(...).
4/4 mismatches
x[1]: "    # initial comment\n    a &lt;- 1"
y[1]: "a &lt;- 1 # initial comment"

x[2]: "    b &lt;- 2 # inline comment"
y[2]: "b &lt;- 2 # inline comment"

x[3]: "    c &lt;- 3\n    # inbetween comment"
y[3]: "c &lt;- 3 # inbetween comment"

x[4]: "    d &lt;- 4\n    # finishing comment"
y[4]: "d &lt;- 4 # finishing comment"</failure>
    </testcase>
    <testcase time="0.018" classname="qenv_get_code" name="comments_get_pasted_when_they_fall_into_calls">
      <failure type="failure" message="get_code(q) not identical to c(...). ('test-qenv_get_code.R:494:3')">get_code(q) not identical to c(...).
4/4 mismatches
x[1]: "    # initial comment\n    a &lt;- 1 # A comment"
y[1]: "a &lt;- 1 # initial comment # A comment"

x[2]: "    b &lt;- 2 # inline comment"
y[2]: "b &lt;- 2 # inline comment"

x[3]: "    c &lt;- 3 # C comment\n    # inbetween comment"
y[3]: "c &lt;- 3 # C comment # inbetween comment"

x[4]: "    d &lt;- 4\n    # finishing comment"
y[4]: "d &lt;- 4 # finishing comment"</failure>
    </testcase>
    <testcase time="0.018" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition"/>
    <testcase time="0.0069999999999999" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to &quot;foo &lt;- function(b) {\n    b &lt;- b + 2\n}&quot;. ('test-qenv_get_code.R:517:3')">get_code(q, names = "foo") not identical to "foo &lt;- function(b) {\n    b &lt;- b + 2\n}".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.016" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it"/>
    <testcase time="0.0069999999999999" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_that_has_function_in_it">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to &quot;foo &lt;- function(b) {\n    function(c) {\n        b &lt;- c + 2\n    }\n}&quot;. ('test-qenv_get_code.R:533:3')">get_code(q, names = "foo") not identical to "foo &lt;- function(b) {\n    function(c) {\n        b &lt;- c + 2\n    }\n}".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0229999999999999" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to code[c(1, 3)]. ('test-qenv_get_code.R:547:3')">get_code(q, names = "b") not identical to code[c(1, 3)].
Lengths differ: 1 is not 2</failure>
    </testcase>
    <testcase time="0.0170000000000001" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_if_there_is_multiple_function_definitions">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to &quot;foo &lt;- function(b) {\n    function(c) {\n        b &lt;- c + 2\n    }\n}&quot;. ('test-qenv_get_code.R:551:3')">get_code(q, names = "foo") not identical to "foo &lt;- function(b) {\n    function(c) {\n        b &lt;- c + 2\n    }\n}".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0249999999999999" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_in_lapply"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="ignores_occurrence_in_a_function_definition_in_lapply">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to &quot;x &lt;- 1&quot;. ('test-qenv_get_code.R:566:3')">get_code(q, names = "x") not identical to "x &lt;- 1".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0109999999999999" classname="qenv_get_code" name="does_not_ignore_occurrence_in_function_body_if_object_exsits_in_env">
      <skipped message="Reason: This is not urgent and can be ommitted with @linksto tag. ('test-qenv_get_code.R:573:3')"/>
    </testcase>
    <testcase time="0.018" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets">
      <failure type="failure" message="get_code(q, names = &quot;foo&quot;) not identical to &quot;foo &lt;- function(b) b &lt;- b + 2&quot;. ('test-qenv_get_code.R:593:3')">get_code(q, names = "foo") not identical to "foo &lt;- function(b) b &lt;- b + 2".
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0149999999999999" classname="qenv_get_code" name="ignores_occurrence_in_function_definition_without_curly_brackets"/>
    <testcase time="0.0130000000000001" classname="qenv_get_code" name="detects_occurrence_of_the_function_object"/>
    <testcase time="0.004" classname="qenv_get_code" name="detects_occurrence_of_the_function_object">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to c(...). ('test-qenv_get_code.R:611:3')">get_code(q, names = "b") not identical to c(...).
Lengths differ: 0 is not 4</failure>
    </testcase>
    <testcase time="0.02" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_when_a_formal_is_named_the_same_as_a_function"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_when_a_formal_is_named_the_same_as_a_function">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to c(&quot;x &lt;- 1&quot;, &quot;foo &lt;- function(foo = 1) \&quot;text\&quot;&quot;, &quot;a &lt;- foo(x)&quot;). ('test-qenv_get_code.R:624:3')">get_code(q, names = "a") not identical to c("x &lt;- 1", "foo &lt;- function(foo = 1) \"text\"", "a &lt;- foo(x)").
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.0269999999999999" classname="qenv_get_code" name="detects_occurrence_of_a_function_definition_with_a_linksto_usage">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to c(...). ('test-qenv_get_code.R:641:3')">get_code(q, names = "x") not identical to c(...).
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.0210000000000001" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.0109999999999999" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to `code`. ('test-qenv_get_code.R:664:3')">get_code(q, names = "a") not identical to `code`.
Lengths differ: 0 is not 5</failure>
    </testcase>
    <testcase time="0.0229999999999999" classname="qenv_get_code" name="detects_cooccurrence_properly_even_if_all_objects_are_on_lhs"/>
    <testcase time="0.00500000000000012" classname="qenv_get_code" name="detects_cooccurrence_properly_even_if_all_objects_are_on_lhs">
      <failure type="failure" message="get_code(q, names = &quot;b&quot;) not identical to `code`. ('test-qenv_get_code.R:677:3')">get_code(q, names = "b") not identical to `code`.
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.0390000000000001" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to gsub(&quot;'&quot;, &quot;\&quot;&quot;, code[1:2], fixed = TRUE). ('test-qenv_get_code.R:697:3')">get_code(q, names = "x") not identical to gsub("'", "\"", code[1:2], fixed = TRUE).
2/2 mismatches
x[1]: "setClass('aclass', slots = c(a = 'numeric', x = 'numeric', y = 'numeric')
x[1]: ) # @linksto a x"
y[1]: "setClass(\"aclass\", slots = c(a = \"numeric\", x = \"numeric\", y = \"nu
y[1]: meric\")) # @linksto a x"

x[2]: "x &lt;- new('aclass', a = 1:3, x = 1:3, y = 1:3)"
y[2]: "x &lt;- new(\"aclass\", a = 1:3, x = 1:3, y = 1:3)"</failure>
    </testcase>
    <testcase time="0.0319999999999996" classname="qenv_get_code" name="understands_usage_and_do_not_treat_rhs_of_as_objects_only_lhs_">
      <failure type="failure" message="get_code(q, names = &quot;a&quot;) not identical to gsub(&quot;'&quot;, &quot;\&quot;&quot;, code, fixed = TRUE). ('test-qenv_get_code.R:701:3')">get_code(q, names = "a") not identical to gsub("'", "\"", code, fixed = TRUE).
3/6 mismatches
x[1]: "setClass('aclass', slots = c(a = 'numeric', x = 'numeric', y = 'numeric')
x[1]: ) # @linksto a x"
y[1]: "setClass(\"aclass\", slots = c(a = \"numeric\", x = \"numeric\", y = \"nu
y[1]: meric\")) # @linksto a x"

x[2]: "x &lt;- new('aclass', a = 1:3, x = 1:3, y = 1:3)"
y[2]: "x &lt;- new(\"aclass\", a = 1:3, x = 1:3, y = 1:3)"

x[3]: "a &lt;- new('aclass', a = 1:3, x = 1:3, y = 1:3)"
y[3]: "a &lt;- new(\"aclass\", a = 1:3, x = 1:3, y = 1:3)"</failure>
    </testcase>
    <testcase time="0.0250000000000004" classname="qenv_get_code" name="library_and_require_are_always_returned"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="library_and_require_are_always_returned">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to code[c(2, 3, 4)]. ('test-qenv_get_code.R:720:3')">get_code(q, names = "x") not identical to code[c(2, 3, 4)].
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.0209999999999999" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_is"/>
    <testcase time="0.00499999999999989" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_is">
      <failure type="failure" message="get_code(q, names = &quot;x&quot;) not identical to code[-1]. ('test-qenv_get_code.R:738:3')">get_code(q, names = "x") not identical to code[-1].
Lengths differ: 0 is not 4</failure>
    </testcase>
    <testcase time="0.024" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_a_character"/>
    <testcase time="0.00500000000000034" classname="qenv_get_code" name="data_call_is_returned_when_data_name_is_provided_as_a_character">
      <failure type="failure" message="get_code(q, names = &quot;z&quot;) not identical to gsub(&quot;'&quot;, &quot;\&quot;&quot;, code[-1], fixed = TRUE). ('test-qenv_get_code.R:753:3')">get_code(q, names = "z") not identical to gsub("'", "\"", code[-1], fixed = TRUE).
Lengths differ: 0 is not 4</failure>
    </testcase>
    <testcase time="0.0209999999999999" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code"/>
    <testcase time="0.0129999999999999" classname="qenv_get_code" name="code_can_be_retrieved_with_get_code"/>
    <testcase time="0.016" classname="qenv_get_code" name="starting_with_underscore_is_detected_in_code_dependency"/>
    <testcase time="0.0140000000000002" classname="qenv_get_code" name="with_space_character_is_detected_in_code_dependency"/>
    <testcase time="0.0139999999999998" classname="qenv_get_code" name="without_special_characters_is_cleaned_and_detected_in_code_dependency"/>
    <testcase time="0.016" classname="qenv_get_code" name="with_non_native_pipe_used_as_function_is_detected_code_dependency"/>
    <testcase time="0.0140000000000002" classname="qenv_get_code" name="with_non_native_pipe_is_detected_code_dependency"/>
  </testsuite>
  <testsuite name="qenv_get_var" timestamp="2024-10-30T12:17:54Z" hostname="9196633e295a" tests="10" skipped="0" failures="0" errors="0" time="0.043">
    <testcase time="0.012" classname="qenv_get_var" name="get_var_and_return_error_if_object_is_qenv.error"/>
    <testcase time="0.004" classname="qenv_get_var" name="get_var_and_return_error_if_object_is_qenv.error"/>
    <testcase time="0.00499999999999989" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.00199999999999978" classname="qenv_get_var" name="get_var_and_return_object_from_qenv_environment"/>
    <testcase time="0.00700000000000012" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00200000000000022" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00199999999999978" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00200000000000022" classname="qenv_get_var" name="get_var_and_return_NULL_if_object_not_in_qenv_environment"/>
    <testcase time="0.00499999999999989" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_parent_environment_s_"/>
    <testcase time="0.00199999999999978" classname="qenv_get_var" name="get_var_and_only_returns_objects_from_qenv_not_parent_environment_s_"/>
  </testsuite>
  <testsuite name="qenv_get_warnings" timestamp="2024-10-30T12:17:54Z" hostname="9196633e295a" tests="7" skipped="0" failures="0" errors="0" time="0.043">
    <testcase time="0.00999999999999979" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_and_returns_character"/>
    <testcase time="0.00599999999999978" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv.error_object_and_returns_NULL"/>
    <testcase time="0.004" classname="qenv_get_warnings" name="get_warnings_accepts_a_NULL_object_and_returns_NULL"/>
    <testcase time="0.00600000000000023" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_no_warning_and_returns_NULL"/>
    <testcase time="0.00599999999999978" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_2_warnings"/>
    <testcase time="0.00500000000000034" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_a_single_eval_code_returning_2_warnings"/>
    <testcase time="0.00599999999999978" classname="qenv_get_warnings" name="get_warnings_accepts_a_qenv_object_with_1_warning_eval_code_and_1_no_warning_eval_code"/>
  </testsuite>
  <testsuite name="qenv_join" timestamp="2024-10-30T12:17:54Z" hostname="9196633e295a" tests="40" skipped="0" failures="0" errors="0" time="0.143">
    <testcase time="0.0089999999999999" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.00200000000000022" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="Joining_two_identical_qenvs_outputs_the_same_object"/>
    <testcase time="0.00600000000000023" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.00199999999999978" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="Joining_two_independent_qenvs_results_in_object_having_combined_code_and_environments"/>
    <testcase time="0.0089999999999999" classname="qenv_join" name="Joined_qenv_does_not_duplicate_common_code"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="Joined_qenv_does_not_duplicate_common_code"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="Joined_qenv_does_not_duplicate_common_code"/>
    <testcase time="0.00599999999999978" classname="qenv_join" name="Not_able_to_join_two_qenvs_if_any_of_the_shared_objects_changed"/>
    <testcase time="0.00500000000000034" classname="qenv_join" name="Not_able_to_join_two_qenvs_if_any_of_the_shared_objects_changed"/>
    <testcase time="0.00800000000000001" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.00300000000000011" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="join_does_not_duplicate_code_but_adds_only_extra_code"/>
    <testcase time="0.0089999999999999" classname="qenv_join" name="Not_possible_to_join_qenvs_which_share_some_code_when_one_of_the_shared_object_was_modified"/>
    <testcase time="0.00700000000000012" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00200000000000022" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_don_t_share_any_code_identified_by_id_"/>
    <testcase time="0.00800000000000001" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.004" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="qenv_objects_are_mergeable_if_they_share_common_initial_qenv_elements"/>
    <testcase time="0.00699999999999967" classname="qenv_join" name="qenv_objects_aren_t_mergeable_if_they_share_common_qenv_elements_proceeded_with_some_other_code"/>
    <testcase time="0.00500000000000034" classname="qenv_join" name="qenv_objects_aren_t_mergeable_if_they_share_common_qenv_elements_proceeded_with_some_other_code"/>
    <testcase time="0.00599999999999978" classname="qenv_join" name="qenv_objects_are_not_mergable_if_they_have_multiple_common_streaks"/>
    <testcase time="0.004" classname="qenv_join" name="qenv_objects_are_not_mergable_if_they_have_multiple_common_streaks"/>
    <testcase time="0.00600000000000023" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00100000000000033" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00199999999999978" classname="qenv_join" name="joining_with_a_qenv.error_object_returns_the_qenv.error_object"/>
    <testcase time="0.00700000000000012" classname="qenv_join" name="Joining_two_independent_qenvs_with_warnings_results_in_object_having_combined_warnings"/>
    <testcase time="0.00099999999999989" classname="qenv_join" name="Joining_two_independent_qenvs_with_warnings_results_in_object_having_combined_warnings"/>
    <testcase time="0.00700000000000012" classname="qenv_join" name="Joining_two_independent_qenvs_with_messages_results_in_object_having_combined_messages"/>
    <testcase time="0.00199999999999978" classname="qenv_join" name="Joining_two_independent_qenvs_with_messages_results_in_object_having_combined_messages"/>
  </testsuite>
  <testsuite name="qenv_within" timestamp="2024-10-30T12:17:54Z" hostname="9196633e295a" tests="13" skipped="0" failures="0" errors="1" time="0.081">
    <testcase time="0.00900000000000034" classname="qenv_within" name="simple_and_compound_expressions_are_evaluated"/>
    <testcase time="0.00299999999999967" classname="qenv_within" name="simple_and_compound_expressions_are_evaluated"/>
    <testcase time="0.00700000000000012" classname="qenv_within" name="styling_of_input_code_does_not_impact_evaluation_results"/>
    <testcase time="0.00700000000000012" classname="qenv_within" name="styling_of_input_code_does_not_impact_evaluation_results"/>
    <testcase time="0.0089999999999999" classname="qenv_within" name="within.qenv_renturns_a_qenv_where_env_is_a_deep_copy_of_that_in_data_">
      <error type="error" message="Error in `if (pd$token[1] == &quot;COMMENT&quot;) { ('test-qenv_within.R:60:3')">Error in `if (pd$token[1] == "COMMENT") {
    first_comment &lt;- 1:(which(pd$parent == 0)[1] - 1)
    pd_first_comment &lt;- pd[first_comment, ]
    pd &lt;- pd[-first_comment, ]
    n &lt;- nrow(pd_first_comment)
    first_comment_ids &lt;- data.frame(lines = c(pd_first_comment[1, 
        "line1"], pd_first_comment[n, "line2"]), cols = c(pd_first_comment[1, 
        "col1"], pd_first_comment[n, "col2"]))
} else {
    first_comment_ids &lt;- NULL
}`: missing value where TRUE/FALSE needed
Backtrace:
    ▆
 1. ├─base::within(...) at test-qenv_within.R:60:3
 2. └─teal.code:::within.qenv(...)
 3.   ├─teal.code::eval_code(object = data, code = as.expression(calls))
 4.   └─teal.code::eval_code(object = data, code = as.expression(calls))
 5.     ├─teal.code::eval_code(object, code = paste(lang2calls(code), collapse = "\n"))
 6.     └─teal.code::eval_code(object, code = paste(lang2calls(code), collapse = "\n"))
 7.       └─teal.code:::split_code(code)
 8.         └─teal.code:::get_line_ids(pd)</error>
    </testcase>
    <testcase time="0.02" classname="qenv_within" name="within.qenv_renturns_qenv.error_even_if_evaluation_raises_error"/>
    <testcase time="0.00099999999999989" classname="qenv_within" name="within.qenv_renturns_qenv.error_even_if_evaluation_raises_error"/>
    <testcase time="0.00500000000000034" classname="qenv_within" name="external_values_can_be_injected_into_expressions_through_..._"/>
    <testcase time="0.00699999999999967" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.004" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00300000000000011" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00099999999999989" classname="qenv_within" name="external_values_are_not_taken_from_calling_frame"/>
    <testcase time="0.00499999999999989" classname="qenv_within" name="within_run_on_qenv.error_returns_the_qenv.error_as_is"/>
  </testsuite>
  <testsuite name="utils" timestamp="2024-10-30T12:17:54Z" hostname="9196633e295a" tests="12" skipped="0" failures="0" errors="0" time="0.034">
    <testcase time="0.00700000000000012" classname="utils" name="dev_suppress_function_supress_printing_plot_on_IDE"/>
    <testcase time="0.00200000000000022" classname="utils" name="dev_suppress_function_supress_printing_plot_on_IDE"/>
    <testcase time="0.004" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00299999999999967" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00200000000000022" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00199999999999978" classname="utils" name="lang2calls_returns_list_of_calls_given_a_language_object"/>
    <testcase time="0.00500000000000034" classname="utils" name="lang2calls_returns_list_of_calls_given_a_list_of_language_objects"/>
    <testcase time="0.00199999999999978" classname="utils" name="lang2calls_returns_list_of_calls_given_a_list_of_language_objects"/>
    <testcase time="0.00300000000000011" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.00099999999999989" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.00200000000000022" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
    <testcase time="0.00099999999999989" classname="utils" name="lang2calls_returns_atomics_and_symbols_wrapped_in_list"/>
  </testsuite>
</testsuites>
