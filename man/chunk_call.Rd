% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunk.R
\name{chunk_call}
\alias{chunk_call}
\alias{chunk_call$new}
\alias{chunk}
\title{Code chunk - including expression and variables}
\format{
An \code{\link{R6Class}} generator object
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Chunks are being deprecated \code{qenv} objects should be used instead
}
\section{Methods}{

\describe{
\item{\code{new(expression = NULL)}}{
Create the object by setting the expression field which needs to
be of type \code{call}.
}
\item{\code{eval(envir = parent.frame()}}{
Evaluation of this code chunk. The value of the evaluated chunk with
substitution of the variables by the environment values.
}
\item{\code{get_eval_info()}}{
Returns a list with 5 elements: code, evaluation information, messages
information, warnings information and errors information.
}
\item{\code{get_rcode(envir = parent.frame()}}{
For the code chunk with the string of the R-Code is returned.
}
\item{\code{is_ok()}}{
Get the information if the execution went right.
}
\item{\code{info()}}{
Derive all slots this class carries. Slots are private and can just be derived
by the \code{info} function which will return a list.
}
\item{\code{info_msg()}}{
Get a formatted string of the evaluated code and caught warnings and errors.
}
\item{\code{get_errors()}}{
Get a string of errors caught during evaluation.
}
\item{\code{get_warnings()}}{
Get a string of warnings caught during evaluation.
}
\item{\code{get_messages()}}{
Get a string of messages caught during evaluation.
}
\item{\code{is_evaluated()}}{
Return \code{TRUE} if chunk was evaluated, \code{FALSE} otherwise.
}
\item{\code{is_warnings()}}{
Return \code{TRUE} if chunk was evaluated and output any messages, \code{FALSE} otherwise.
}
\item{\code{is_messages()}}{
Return \code{TRUE} if chunk was evaluated and output any messages, \code{FALSE} otherwise.
}
}
}

\examples{
y <- 0
x <- chunk$new(expression = quote(y <- 1))

x$get_rcode()
x$is_ok()
x$info_msg()
x$eval()
x$is_ok()
cat(x$info_msg())
y == 1

# error handling
x <- chunk$new(expression = call("stop", "test"))
x$eval()
x$is_ok()
x$info_msg()
x$info()
}
\keyword{data}
