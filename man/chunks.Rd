% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunks.R
\docType{class}
\name{chunks}
\alias{chunks}
\title{Multiple Code chunk handler}
\format{
An \code{\link{R6Class}} generator object
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

\code{chunks} is a specialized stack for call objects and comments. It is intended to capture and evaluate R code for
a sequence of analysis steps.
}
\section{Methods}{

\describe{
\item{\code{initialize(envir = new.env())}}{
Initializes the object.

\if{html}{\out{<div class="sourceCode">}}\preformatted{\code{envir}: (optional) environment to get objects from to chunks environment
}\if{html}{\out{</div>}}

}
\item{\code{push(x, id)}}{
This method adds an expression code chunk or comment code chunk to this object.
If no \code{id} is given a random id is generated.

\if{html}{\out{<div class="sourceCode">}}\preformatted{  The method needs the parameter \code{x}. In case this is of type \code{call} and the code will
  be evaluated via \code{eval}. Additionally, the code can be given as a string and a comment will be inserted.
}\if{html}{\out{</div>}}

}
\item{\code{eval()}}{
This method applies the \code{eval_id} method to each code chunk stored inside this object.

\if{html}{\out{<div class="sourceCode">}}\preformatted{   This method should not be evaluated multiple times, else it throws a warning. This is due to the
   fact that multiple evaluations of the following second code snippet is dangerous:
   \\itemize\{
     \\item\{1 \}\{a <- 2\}
     \\item\{2 \}\{a <- a + 1\}
   \}
   \code{eval} evaluates code just once and warn user if one tries to evaluate multiple times.
}\if{html}{\out{</div>}}

}
\item{\code{get_rcode()}}{
Run \code{get_rcode_id} for all code chunks inside this object.
}
\item{\code{get_warnings()}}{
Return warnings encountered during execution of the code inside the object.
}
\item{\code{get_messages()}}{
Return list of warnings encountered during execution of the code inside the object.
}
\item{\code{eval_info(ids = private$get_call_ids())}}{
Accepts a vector of chunk ids.
Returns a list with evaluation information about each chunk (messages, warnings, errors).
Default is to hide information about all \code{chunk_comment} objects. Pass chunk ids
to see information about specific ids.
}
\item{\code{reset()}}{
Delete all chunks handles inside this stack and reset environment.
}
\item{\code{info()}}{
Print all private content. Used for debugging only.
}
\item{\code{info_msg()}}{
Get an information about how the evaluation of the chunk stack went.
Most useful if \code{is_ok()} returns \code{FALSE}.
}
\item{\code{get(var, inherits = FALSE)}}{
Returns variable from chunks environment. For more information see
\link[base:get]{get}.
}
\item{\code{is_ok()}}{
Checks if all chunks are evaluated and if there is any error.
}
\item{\code{get_eval_msg()}}{
Returns error message if there is any error.
}
\item{\code{validate_is_ok(msg)}}{
Return \verb{shiny's} validation error with custom message if \code{is_ok} returns \code{FALSE}.
}
\item{\code{validate_is(var, class, msg)}}{
Return \verb{shiny's} validation error with custom message if \code{var} is not of class \code{class}.
}
\item{\code{validate_all(var, class, msg)}}{
Return \verb{shiny's} validation error with custom message if \code{is_ok} returns \code{FALSE} or
\code{var} is not of class \code{class}.
}
\item{\code{ls(all.names = FALSE)}}{
Return a vector of bindings present in the environment of a chunks object. See \link{ls}
for more information.
}
\item{\code{get_reactive_summary()}}{
Return a \code{shiny::reactiveValues} object with three elements: \code{msgs}, \code{warnings}, \code{errors}.
Each element is a logical vector with values corresponding to \code{chunk} objects inside \code{chunks}.
\code{TRUE} in the \code{msgs} vector indicates at least one message was returned in a corresponding chunk.
\code{TRUE} in the \code{warnings} vector indicates at least one warning was returned.
\code{TRUE} in the \code{errors} vector indicates an error was thrown.
}
}
}

\examples{
x <- chunks$new()

x$push(id = "test_1", x = call("print", 1))
res <- x$eval()
res

x$push(id = "test_2", x = call("print", 2))
x$push(id = "test_3", x = call("print", 3))
res <- x$eval()
res
# Below gives a warning
\dontrun{
chunks_eval(chunks = x)
}

x$push(id = "test_4", x = call("print", 4))
x$get_rcode()

x$get_rcode()

# Error handling
x$push(id = "test_error", x = call("stop", "test"))
x$eval() # returns NULL, does not rise an error
x$is_ok() # FALSE
x$info_msg()
# Below used inside shiny apps
\dontrun{
x$validate_is_ok("This is my custom error message")
}

x$info()

# Analysis Example

x <- chunks$new()
x$push("# Prepare Data")
x$push(quote(x <- iris$Sepal.Length))
x$push(quote({
  y <- iris$Petal.Length
  {
    col <- iris$Species
  }
}))

x$eval()
x$get("col")[1:5]
\dontrun{
x$get("mean") # should not scope in getter
}

x$push("") # newline
x$push("# Analysis")
x$push(quote(plot(x, y, col = col)))

x$is_ok()
x$eval()
x$is_ok() # now all chunks were evaluated and no errors occured

cat(paste(x$get_rcode(), collapse = "\n"))
}
\keyword{data}
