% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/with-qenv.R
\name{quenv}
\alias{quenv}
\alias{with.quenv}
\alias{within.quenv}
\alias{format.quenv}
\alias{print.quenv}
\alias{get_code_quenv}
\alias{get_conditions}
\title{qenv refactor prototype}
\usage{
quenv()

\method{with}{quenv}(data, expr, text, ...)

\method{within}{quenv}(data, expr, text, ...)

\method{format}{quenv}(x)

\method{print}{quenv}(x, ...)

get_code_quenv(x, include_messages = FALSE)

get_conditions(x, condition = c("errors", "warnings", "messages", "all"))
}
\arguments{
\item{data, x}{(\code{quenv})}

\item{expr}{(\code{language}) simple or compound expression to evaluate in \code{data}}

\item{text}{(\code{character}) character vector of expressions to evaluate in \code{data}}

\item{...}{\code{name:value} pairs to inject values into \code{expr}}
}
\value{
\code{quenv} returns a \code{quenv} object. \code{with} returns NULL invisibly. \code{within} returns a modified deep copy of \code{data}.
}
\description{
Simple to use environment with history tracking.
}
\details{
Create a \code{quenv} object, which is an environment, and execute code inside.
Code can be supplied as expressions, literal character vectors, as well as name-bound character vectors.
External values can be injected into the code with the ellipsis.

\code{quenv} creates \code{quenv} object.
\code{with} acts in \code{quenv} object.
\code{within} creates and modifies a (deep) copy of \code{quenv} object.
\code{get_code} returns list of function calls or a data.frame with code and the conditions it raised.
\code{get_conditions} returns list of condition messages (character strings).
}
\examples{

q <- quenv()

# execute code
with(q, {
  i <- iris
  m <- mtcars
})
q

# supply code as strings
q <- quenv()
with(q, text = "c <- cars")
code_as_text <- "w <- warpbreaks"
with(q, text = code_as_text)

# error messages are stored
try(
  with(q, {
    subset(i, Species == species) # raises error and stops evaluation
    ms <- subset(m, cyl == 4) # not evaluated
  })
)
q

# warnings and messages are also stored
with(q, {
  warning("this is a warning")
})
with(q, {
  message("this is a message")
})
q

# access variables and environment history
q$m
get_code(q)
get_conditions(q, "error")

# inject values into code
q <- quenv()
with(q, i <- iris)
with(q, print(dim(subset(i, Species == "virginica"))))
try(
  with(q, print(dim(subset(i, Species == species)))) # fails
)
with(q, print(dim(subset(i, Species == species))), species = "versicolor")
species_external <- "versicolor"
with(q, print(dim(subset(i, Species == species))), species = species_external)

# execute code in copy of `quenv` and return modified copy
q <- quenv()
with(q, i <- iris)
qq <- within(q, m <- mtcars)

}
\keyword{internal}
