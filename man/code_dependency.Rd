% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-code_dependency.R
\name{code_dependency}
\alias{code_dependency}
\title{Create Object Dependencies Structure Within Parsed Code}
\usage{
code_dependency(code, object_names)
}
\arguments{
\item{code}{An \code{expression} with \code{srcref} attribute or a \code{character} with the code.}

\item{object_names}{(\code{character(n)}) A vector containing the names of existing objects.}
}
\value{
A \code{list} with three components:
\itemize{
\item \code{occurrence}: A named \code{list} where object names are the names of existing objects, and each element is a numeric
vector indicating the calls in which the object appears.
\item \code{cooccurrence}: A \code{list} of the same length as the number of calls in \code{parsed_code}
(\code{parsed_code = parse(text = code)} for code input as \code{character} and \code{parsed_code = code} for expression input.
It contains \code{NULL} values if there is no co-occurrence between objects or a \code{character} vector indicating the
co-occurrence of objects in a specific \code{parsed_code} call element. If it's a character vector, the first element is
the name of the dependent object, and the rest are the influencing objects.
\item \code{effects}: A named \code{list} where object names are the names of existing objects, and each element is a numeric
vector indicating which calls have an effect on that object. If there are no side-effects pointing at an object,
the element is \code{NULL}.
}
}
\description{
This function constructs a dependency structure that identifies the relationships between objects in
parsed code. It helps you understand which objects are needed to recreate a specific object.
}
\details{
This function assumes that object relationships are established using the \verb{<-}, \code{=}, or \verb{->} assignment
operators. It does not support other object creation methods like \code{assign} or \verb{<<-}, nor non-standard-evaluation
methods. To specify relationships between side-effects and objects, you can use the comment tag
\verb{# @linksto object_name} at the end of a line where the side-effect occurs.
}
\keyword{internal}
