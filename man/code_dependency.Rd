% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-code-dependency.R
\name{code_dependency}
\alias{code_dependency}
\title{Create Object Dependencies Structure Within Parsed Code}
\usage{
code_dependency(parsed_code, envir = new.env())
}
\arguments{
\item{parsed_code}{(\code{expression}) result of \code{parse()}}

\item{envir}{\code{environment} in which to seek objects created during \code{eval} of \code{parsed_code}}
}
\value{
A \code{list} containing 3 elements
\itemize{
\item \code{occurrence} - named \code{list} by object names with numeric vector as elements indicating calls in which object
appears.
\item \code{cooccurrence} - \code{list} of the same length as number of calls in \code{parsed_code}, containing \code{NULL}s if there is no
co-occurrence between objects, or a \code{character} vector indicating co-occurrence of objects in specific \code{parsed_code}
call element. If a character vector, then the first element is the name of the dependent object, and the rest are the
influencing objects
\item \code{effects} - named \code{list}  by object names with numeric vector as elements indicating which calls has effect on this
object, or NULL if there are no side-effects pointing at this object.
}
}
\description{
Build up ingredients needed to restore the code required to create a specific object.
}
\details{
The relation between objects is assumed to be passed by \verb{<-}, \code{=} or \verb{->} assignment operators. No other
object creation methods (like \code{assign}, or \verb{<<-} or any non-standard-evaluation method) are supported. To specify
relations between side-effects and objects, use specific comment tag \verb{# @effect object_name} at the end of the line
in which the side-effect appears. Check examples to see the usage.
}
\examples{

library(dplyr)
code <- '
  arm_mapping <- list(
    "A: Drug X" = "150mg QD",
    "B: Placebo" = "Placebo",
    "C: Combination" = "Combination"
  )
  color_manual <- c("150mg QD" = "#000000", "Placebo" = "#3498DB", "Combination" = "#E74C3C")
  # assign LOQ flag symbols: circles for "N" and triangles for "Y", squares for "NA"
  shape_manual <- c("N" = 1, "Y" = 2, "NA" = 0)
  ADSL <- goshawk::rADSL
  goshawk::rADLB-> ADLB
  iris2 <- iris # @effect ADLB ADSL
  var_labels <- lapply(ADLB, function(x) attributes(x)$label)
  iris3 <- iris'
code2 <- '
  ADLB <- ADLB \%>\%
    dplyr::mutate(AVISITCD = dplyr::case_when(
      AVISIT == "SCREENING" ~ "SCR",
      AVISIT == "BASELINE" ~ "BL",
      grepl("WEEK", AVISIT) ~
        paste(
          "W",
          trimws(
            substr(
              AVISIT,
              start = 6,
              stop = stringr::str_locate(AVISIT, "DAY") - 1
            )
          )
        ),
      TRUE ~ NA_character_
    )) \%>\%
    dplyr::mutate(AVISITCDN = dplyr::case_when(
      AVISITCD == "SCR" ~ -2,
      AVISITCD == "BL" ~ 0,
      grepl("W", AVISITCD) ~ as.numeric(gsub("[^0-9]*", "", AVISITCD)),
      TRUE ~ NA_real_
    )) \%>\%
    # use ARMCD values to order treatment in visualization legend
    dplyr::mutate(TRTORD = ifelse(grepl("C", ARMCD), 1,
                                  ifelse(grepl("B", ARMCD), 2,
                                         ifelse(grepl("A", ARMCD), 3, NA)
                                  )
    )) \%>\%
    dplyr::mutate(ARM = as.character(arm_mapping[match(ARM, names(arm_mapping))])) \%>\%
    dplyr::mutate(ARM = factor(ARM) \%>\%
                    reorder(TRTORD)) \%>\%
    dplyr::mutate(
      ANRHI = dplyr::case_when(
        PARAMCD == "ALT" ~ 60,
        PARAMCD == "CRP" ~ 70,
        PARAMCD == "IGA" ~ 80,
        TRUE ~ NA_real_
      ),
      ANRLO = dplyr::case_when(
        PARAMCD == "ALT" ~ 20,
        PARAMCD == "CRP" ~ 30,
        PARAMCD == "IGA" ~ 40,
        TRUE ~ NA_real_
      )
    ) \%>\%
    dplyr::rowwise() \%>\%
    dplyr::group_by(PARAMCD) \%>\%
    dplyr::mutate(LBSTRESC = ifelse(
      USUBJID \%in\% sample(USUBJID, 1, replace = TRUE),
      paste("<", round(runif(1, min = 25, max = 30))), LBSTRESC
    )) \%>\%
    dplyr::mutate(LBSTRESC = ifelse(
      USUBJID \%in\% sample(USUBJID, 1, replace = TRUE),
      paste(">", round(runif(1, min = 70, max = 75))), LBSTRESC
    )) \%>\%
    ungroup()'

code3 <- '
  attr(ADLB[["ARM"]], "label") <- var_labels[["ARM"]]
  attr(ADLB[["ANRHI"]], "label") <- "Analysis Normal Range Upper Limit"
  attr(ADLB[["ANRLO"]], "label") <- "Analysis Normal Range Lower Limit"
  mtcars # @effect ADLB
  options(prompt = ">") # @effect ADLB

  # add LLOQ and ULOQ variables
  ADLB_LOQS<-goshawk:::h_identify_loq_values(ADLB)
  goshawk:::h_identify_loq_values(ADLB)->ADLB_LOQS
  ADLB = dplyr::left_join(ADLB, ADLB_LOQS, by = "PARAM")
  iris6 <- list(ADLB, ADLB_LOQS, ADSL)
  iris5 <- iris'

d <- new.env()
old_code_dep <- code_dependency(parse(text = code), envir = d)
eval(parse(text = code), envir = d)
ls(d)
new_code_dep <- code_dependency(parse(text = code2), envir = d)
bind_code_dependency(old_code_dep, new_code_dep)


q1 <- teal.code:::new_qenv()
q1@code_dependency

q2 <- teal.code::eval_code(q1, code = code)
q2@code
q2@code_dependency

q3 <- teal.code::eval_code(q2, code = code2)
q3@code
q3@code_dependency

q4 <- teal.code::eval_code(q3, code = code3)
q4@code
q4@code_dependency

get_code(q2, name = "ADLB")
get_code(q3, name = "ADLB")
get_code(q4, name = "ADLB")
get_code(q4, name = "var_labels")
get_code(q4, name = "ADSL")
get_code(q4)

}
\keyword{internal}
