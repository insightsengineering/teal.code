% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qenv-within.R
\name{within.qenv}
\alias{within.qenv}
\title{Evaluate expression in \code{qenv} object.}
\usage{
\method{within}{qenv}(data, expr, ...)
}
\arguments{
\item{data}{\code{qenv} object}

\item{expr}{\code{expression} to evaluate}

\item{...}{\code{name:value} pairs to inject values into \code{expr}}
}
\value{
Returns a \code{qenv} object with \code{expr} evaluated. If evaluation raises an error, a \code{qenv.error} is returned.
}
\description{
Convenience function for evaluating inline code inside the environment of a \code{qenv}.
}
\details{
This is a wrapper for \code{eval_code} that provides a simplified way of passing code for evaluation.
It accepts only inline expressions (both simple and compound) and allows for injecting values into \code{expr}
through the \code{...} argument: as \code{name:value} pairs are passed to \code{...},
\code{name} in \code{expr} will be replaced with \code{value}.
}
\examples{

q <- new_qenv()

# execute code
q <- within(q, {
  i <- iris
})
q <- within(q, {
  m <- mtcars
  f <- faithful
})
q
get_code(q)

# inject values into code
q <- new_qenv()
q <- within(q, i <- iris)
within(q, print(dim(subset(i, Species == "virginica"))))
within(q, print(dim(subset(i, Species == species)))) # fails
within(q, print(dim(subset(i, Species == species))), species = "versicolor")
species_external <- "versicolor"
within(q, print(dim(subset(i, Species == species))), species = species_external)

}
\seealso{
\code{\link{eval_code}}, \code{\link[base:with]{base::within}}
}
