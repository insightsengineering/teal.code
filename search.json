[{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"decoupling-chunks-containers","dir":"Articles","previous_headings":"","what":"Decoupling chunks containers","title":"Advanced chunks","text":"shiny app often need multiple chunks containers may used independently certain parts application may used together parts application. ability multiple chunks containers combined one allows greater flexibility code, allows developer apply DRY principle (stands repeat means code used multiple places written defined ) optimize performance. Much functionality use single chunks container object independently already covered Basic chunks vignette, read first going .","code":""},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"creating-a-chunks-container-and-assigning-it-to-a-variable","dir":"Articles","previous_headings":"","what":"Creating a chunks container and assigning it to a variable","title":"Advanced chunks","text":"order multiple chunks containers, must accessible distinguishable via variable. teal.code::chunks_push_chunks function called combine chunks containers together. Note base chunks container start combining following examples empty. However, case. Starting clean slate easier comprehend. Perhaps part shiny application needs output plot  Perhaps part shiny application needs output table Perhaps main part shiny application needs output plot, table, code generate  chunks containers merged together, code expressions combined order containers merged environments combined single environment. Even event expressions combined lead errors thrown evaluated, way chunks object know evaluation. Hence code expressions interrupt merging chunks containers together. However, potential conflict two chunks containers variables holds different values respective environments throw error merging chunks containers.","code":"ch_0 <- teal.code::chunks$new() ch_1 <- teal.code::chunks$new() ch_2 <- teal.code::chunks$new()  # if data used is static, then it should be computed once # isolating it into its own chunks container accomplishes this goal ch_0$push(quote(df <- data.frame(a = runif(5, -10, 10), b = runif(5, -10, 10)))) ch_1$push(quote({   Sys.sleep(1) # some really long running process   foo_plot <- function(df_arg) plot(df_arg) })) ch_2$push(quote({   Sys.sleep(1) # some really long running process   foo_print <- function(df_arg) df_arg }))  # chunks containers should be evaluated before being merged # the reason for this will be explain later teal.code::chunks_safe_eval(chunks = ch_0) ##           a          b ## 1 -8.890127 -0.8260322 ## 2  5.490624 -8.3331720 ## 3 -4.718589  5.4973469 ## 4  9.796958  1.2560476 ## 5 -9.783291 -5.7505811 teal.code::chunks_safe_eval(chunks = ch_1) ## function(df_arg) plot(df_arg) ## <environment: 0x56395fc8ecc8> teal.code::chunks_safe_eval(chunks = ch_2) ## function(df_arg) df_arg ## <environment: 0x56395fda52b0> ch_plot <- teal.code::chunks$new() teal.code::chunks_push_chunks(ch_0, chunks = ch_plot) teal.code::chunks_push_chunks(ch_1, chunks = ch_plot) teal.code::chunks_push(quote(foo_plot(df)), chunks = ch_plot) teal.code::chunks_safe_eval(chunks = ch_plot) ## NULL ch_table <- teal.code::chunks$new() teal.code::chunks_push_chunks(ch_0, chunks = ch_table) teal.code::chunks_push_chunks(ch_2, chunks = ch_table) teal.code::chunks_push(quote(foo_print(df)), chunks = ch_table) teal.code::chunks_safe_eval(chunks = ch_table) ##           a          b ## 1 -8.890127 -0.8260322 ## 2  5.490624 -8.3331720 ## 3 -4.718589  5.4973469 ## 4  9.796958  1.2560476 ## 5 -9.783291 -5.7505811 ch_ouput <- teal.code::chunks$new() teal.code::chunks_push_chunks(ch_0, chunks = ch_ouput) teal.code::chunks_push_chunks(ch_1, chunks = ch_ouput) teal.code::chunks_push_chunks(ch_2, chunks = ch_ouput) teal.code::chunks_push(quote(foo_plot(df)), chunks = ch_ouput) teal.code::chunks_push(quote(foo_print(df)), chunks = ch_ouput) teal.code::chunks_safe_eval(chunks = ch_ouput) ##           a          b ## 1 -8.890127 -0.8260322 ## 2  5.490624 -8.3331720 ## 3 -4.718589  5.4973469 ## 4  9.796958  1.2560476 ## 5 -9.783291 -5.7505811 code <- teal.code::chunks_get_rcode(chunks = ch_ouput) cat(   paste(code, collapse = \"\\n\") ) ## df <- data.frame(a = runif(5, -10, 10), b = runif(5, -10, 10)) ## Sys.sleep(1) ## foo_plot <- function(df_arg) plot(df_arg) ## Sys.sleep(1) ## foo_print <- function(df_arg) df_arg ## foo_plot(df) ## foo_print(df) ch_0 <- teal.code::chunks$new() ch_1 <- teal.code::chunks$new()  ch_0$push(quote(a_var <- 0)) ch_1$push(quote(a_var <- 0))  teal.code::chunks_safe_eval(chunks = ch_0) ## [1] 0 teal.code::chunks_safe_eval(chunks = ch_1) ## [1] 0 # OK - operation is successful as the variable a_var holds the same value in both chunks teal.code::chunks_push_chunks(ch_1, chunks = ch_0)  ch_2 <- teal.code::chunks$new() ch_2$push(quote(a_var <- 1)) teal.code::chunks_safe_eval(chunks = ch_2) ## [1] 1 # ERROR - operation is rejected as the variable a_var holds different values tryCatch(   teal.code::chunks_push_chunks(ch_2, chunks = ch_0),   error = function(e) e ) ## <simpleError in chunks$push_chunks(x = x, overwrite = overwrite): chunks_push_chunks does not allow overwriting already calculated values. ##  Following variables would have been overwritten: ##     - a_var>"},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"why-should-you-evaluate-before-merging","dir":"Articles","previous_headings":"Creating a chunks container and assigning it to a variable","what":"Why should you evaluate before merging?","title":"Advanced chunks","text":"exception code meant return something end function, code usually modifies environment / variables inside environment. chunks containers code evaluated, code block merging operations explained . evaluated, environment updated reflect intended state chunks container described code expressions. described , environment block operation merge chunks containers together conflicts. evaluating merging prevent bugs app.","code":"ch_0 <- teal.code::chunks$new() ch_0$push(quote(a_var <- 0)) teal.code::chunks_safe_eval(chunks = ch_0) ## [1] 0 ch_2 <- teal.code::chunks$new() ch_2$push(quote(a_var <- 1))  # note that ch_2 is not evaluated  # OK - operation is successful teal.code::chunks_push_chunks(ch_2, chunks = ch_0)"},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"cloning-a-chunks-container","dir":"Articles","previous_headings":"","what":"Cloning a chunks container","title":"Advanced chunks","text":"chunks container R6 reference class, default contains clone method. deep copy needed part app needs start state already existing chunks container modify add , part app still needs original chunks container unaltered. example code another way print plot , starts combining chunks non-empty chunks container derived cloning another chunks container","code":"ch_0 <- teal.code::chunks$new() ch_0$push(quote({   df <- data.frame(a = runif(5, -10, 10), b = runif(5, -10, 10))   foo_plot <- function(df_arg) plot(df_arg) })) teal.code::chunks_safe_eval(chunks = ch_0) ## function(df_arg) plot(df_arg) ## <environment: 0x563960ecd040> ch_plot_clone <- teal.code::chunks_deep_clone(ch_0) teal.code::chunks_push(quote(foo_plot(df)), chunks = ch_plot_clone) teal.code::chunks_safe_eval(chunks = ch_plot_clone) ## NULL"},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"extracting-values-of-variables-in-a-chunks-container","dir":"Articles","previous_headings":"","what":"Extracting values of variables in a chunks container","title":"Advanced chunks","text":"order extract values variables inside chunks container, code generates variable must evaluated","code":"ch_0 <- teal.code::chunks$new() ch_0$push(quote(df <- data.frame(a = runif(5, -10, 10), b = runif(5, -10, 10)))) teal.code::chunks_safe_eval(chunks = ch_0) ##            a         b ## 1  4.5657149 -5.570406 ## 2 -9.8059771 -1.625401 ## 3  5.1907330  4.609858 ## 4 -1.1060816 -5.244099 ## 5 -0.9883222  9.529899 env <- new.env() env$df <- teal.code::chunks_get_var(var = \"df\", chunks = ch_0)  # Once extracted, the value can be passed into other chunks containers if needed  ch_print_df <- teal.code::chunks$new() teal.code::chunks_reset(envir = env, chunks = ch_print_df) teal.code::chunks_push(quote(df), chunks = ch_print_df) teal.code::chunks_safe_eval(chunks = ch_print_df) ##            a         b ## 1  4.5657149 -5.570406 ## 2 -9.8059771 -1.625401 ## 3  5.1907330  4.609858 ## 4 -1.1060816 -5.244099 ## 5 -0.9883222  9.529899"},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Advanced chunks","text":"following shiny app uses chunks container object ways mirror sophistical teal app use . app constructs several chunks containers, allowing used combined different parts app, enables app apply DRY principle optimize performance.","code":"library(shiny) library(teal.code) library(dplyr) library(rlang)  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       # Input of Response can be chosen from Event Table       selectInput(         inputId = \"filter_paramcd\",         label = \"Filter Paramcd\",         choices = c(\"OS\", \"EFS\", \"PFS\"),         selected = \"OS\",         multiple = TRUE       ),       selectInput(         inputId = \"filter_sex\",         label = \"Filter sex\",         choices = c(\"F\", \"M\", \"U\"),         selected = c(\"F\", \"M\", \"U\"),         multiple = TRUE       ),       selectInput(         inputId = \"anl_columns\",         label = \"ANL columns\",         choices = NULL,         multiple = TRUE       )     ),     mainPanel(       verbatimTextOutput(\"code\"),       plotOutput(\"plot\"),       DT::DTOutput(\"anl_table\")     )   ) )  server <- function(input, output, session) {   # chunks container to hold the datasets used in this app.   # The purpose of storing the code to generate the datasets is reproducibility.   data_def_chunks <- chunks$new()   chunks_push(     expression = quote({       library(shiny)       library(teal.code)       library(dplyr)       library(rlang)     }),     chunks = data_def_chunks   )   chunks_push(     expression = quote(       adsl <- list(         SUBJID = 1:100,         STUDYID = c(rep(1, 20), rep(2, 50), rep(3, 30)),         AGE = sample(20:88, 100, replace = T) %>% as.numeric(),         SEX = sample(c(\"M\", \"F\", \"U\"), 100, replace = T) %>% as.factor()       ) %>%         as_tibble()     ),     chunks = data_def_chunks   )   chunks_push(     expression = quote(       events <- list(         SUBJID = rep(1:100, 3),         STUDYID = rep(c(rep(1, 20), rep(2, 50), rep(3, 30)), 3),         PARAMCD = c(rep(\"OS\", 100), rep(\"EFS\", 100), rep(\"PFS\", 100)),         AVAL = c(rexp(100, 1 / 100), rexp(100, 1 / 80), rexp(100, 1 / 60)) %>% as.numeric(),         AVALU = rep(\"DAYS\", 300) %>% as.factor()       ) %>%         as_tibble()     ),     chunks = data_def_chunks   )   # evaluating the code so that the datasets become available   chunks_safe_eval(data_def_chunks)    # reactive that needs to extract a value from another chunks container   adsl_filtered_reactive <- reactive({     env <- new.env()     env$adsl <- chunks_get_var(var = \"adsl\", chunks = data_def_chunks)     ch <- chunks$new()     chunks_reset(chunks = ch, env = env)     chunks_push(       chunks = ch,       expr(adsl_filtered <- adsl %>% dplyr::filter(SEX %in% !!input$filter_sex))     )     chunks_safe_eval(ch)     ch   })    # reactive that needs to extract a value from another chunks container   events_filtered_reactive <- reactive({     env <- new.env()     env$events <- chunks_get_var(var = \"events\", chunks = data_def_chunks)     ch <- chunks$new()     chunks_reset(chunks = ch, env = env)     chunks_push(       chunks = ch,       expr(events_filtered <- events %>% dplyr::filter(PARAMCD %in% !!input$filter_paramcd))     )     chunks_safe_eval(ch)     ch   })    # part of the app that merges two other chunks containers   merge_data <- reactive({     ch <- chunks$new()      chunks_push_chunks(chunks = ch, adsl_filtered_reactive())     chunks_push_chunks(chunks = ch, events_filtered_reactive())      chunks_push(       chunks = ch,       expr(anl <- left_join(adsl_filtered, events_filtered, by = c(\"STUDYID\", \"SUBJID\")))     )     chunks_safe_eval(ch)     ch   })    observeEvent(merge_data(), {     anl <- chunks_get_var(\"anl\", merge_data())     updateSelectInput(       session,       \"anl_columns\",       choices = colnames(anl),       selected = colnames(anl)     )   })    # need to clone as chunks are R6 object - this would change ch in merge_data()   subset_anl <- reactive({     ch <- chunks_deep_clone(merge_data())     chunks_push(       rlang::expr(anl_subset <- anl[!!input$anl_columns]),       chunks = ch     )     chunks_safe_eval(ch)     ch   })    # a chunks container that needs to extract a value from another chunks container   table_call <- reactive({     env <- new.env()     env$anl_subset <- chunks_get_var(chunks = subset_anl(), var = \"anl_subset\")     ch <- chunks$new()     chunks_reset(chunks = ch, env = env)     chunks_push(       rlang::expr({         table <- DT::datatable(anl_subset)         table       }),       chunks = ch     )     chunks_safe_eval(ch)     ch   })    # a chunks container that needs to extract a value from another chunks container   plot_call <- reactive({     env <- new.env()     env$anl_subset <- chunks_get_var(chunks = subset_anl(), var = \"anl_subset\")     ch <- chunks$new()     chunks_reset(chunks = ch, env = env)     chunks_push(       rlang::expr({         plot_output <- plot(anl_subset$AGE, anl_subset$AVAL)         plot_output       }),       chunks = ch     )     chunks_safe_eval(ch)     ch   })    # Really long running process that should not be recomputed if can be avoided.   #   # The ability to put this process in its own chunks container, independent of the rest,   # allows the app to avoid re-computation and yet be able to capture its code to ensure reproducibility.   sleep_5_seconds <- reactive({     ch <- chunks$new()     chunks_push(       quote(Sys.sleep(5)),       chunks = ch     )     chunks_safe_eval(ch)     ch   })    # part of the app that needs to combine all chunks containers   outputs_call <- reactive({     ch <- chunks$new()     chunks_push_chunks(chunks = ch, data_def_chunks)     chunks_push_chunks(chunks = ch, sleep_5_seconds())     chunks_push_chunks(chunks = ch, subset_anl())     chunks_push_chunks(chunks = ch, plot_call())     chunks_push_chunks(chunks = ch, table_call())     ch   })    # part of the app that only needs a single chunks container   output$anl_table <- DT::renderDT(chunks_get_var(\"table\", table_call()))   output$plot <- renderPlot(chunks_get_var(\"plot_output\", plot_call()))    output$code <- renderPrint({     cat(       paste(         chunks_get_rcode(chunks = outputs_call()),         collapse = \"\\n\"       )     )   }) }  shinyApp(ui, server)"},{"path":"https://insightsengineering.github.io/teal.code/articles/advanced_chunks.html","id":"conclusion","dir":"Articles","previous_headings":"Example","what":"Conclusion","title":"Advanced chunks","text":"ability multiple chunks containers combined one allows greater flexibility code, allows developer apply DRY principle optimize performance.","code":""},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"the-chunks-container","dir":"Articles","previous_headings":"","what":"The chunks container","title":"Basic chunks","text":"main concept behind code reproducibility teal chunks container object. object consists two elements: stack quoted R expressions, called “chunk” environment carrying variables values  chunks container object allows evaluation expressions contains isolated environment, thus side effects surrounding environment. next sections explain chunk evaluated.","code":""},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"what-is-a-chunk","dir":"Articles","previous_headings":"","what":"What is a chunk?","title":"Basic chunks","text":"quoted R expression necessary step create chunk object, R6 object class chunk_call. Quoted R expressions can created many different ways, four described: evaluate expressions class call assignment given class <- , R uses eval function. function evaluates single call inside current environment default, contain parameter input specific environment argument execute expression . chunk objects can created evaluated using expressions follows: Note teal.code::chunk merely alias teal.code::chunk_call. following code code:","code":"a <- 3  # Creating a chunk by quote ------------------------------ expr_a <- quote(sum(a, a)) print(expr_a) ## sum(a, a) # Creating a chunk by substitute ------------------------------ expr_b <- substitute(b <- sum(a, a)) print(expr_b) ## b <- sum(a, a) # Creating a chunk by call ------------------------------- expr_c <- call(\"sum\", a, a) print(expr_c) ## sum(3, 3) # Creating a chunk by rlang::expr ------------------------------- expr_d <- rlang::expr(sum(a, a)) print(expr_d) ## sum(a, a) a <- 3 expr_a <- quote(sum(a, a)) expr_b <- substitute(b <- a + a)  eval(expr_a) ## [1] 6 eval(expr_b) print(b) ## [1] 6 chunk_1 <- teal.code::chunk$new(expression = expr_a) chunk_1$eval() ## [1] 6 chunk_2 <- teal.code::chunk$new(expression = expr_b) chunk_2$eval() print(b) ## [1] 6 chunk_1 <- teal.code::chunk_call$new(expression = expr_a) chunk_1$eval() ## [1] 6 chunk_2 <- teal.code::chunk_call$new(expression = expr_b) chunk_2$eval() print(b) ## [1] 6"},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"motivation-for-the-chunk-chunk_call-object","dir":"Articles","previous_headings":"What is a chunk?","what":"Motivation for the chunk (chunk_call) object","title":"Basic chunks","text":"quoted R expression can simply evaluated base function, eval, demonstrated . additional functionalities needed chunks container work. additional methods, besides eval, chunk object contains: Internally, chunks container convert quoted base R expressions chunk objects pushed .","code":"# answers the question of whether the code executed without error chunk_1$is_ok() ## [1] TRUE # answers the question of whether the code has been executed chunk_1$is_evaluated() ## [1] TRUE # returns error messages, if any, in the form of a string chunk_err <- teal.code::chunk_call$new(expression = quote(stop(\"error in chunk\"))) chunk_err$get_errors() # no error before evaluation ## character(0) chunk_err$eval() chunk_err$get_errors() ## [1] \"error in chunk\""},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"creation-of-a-chunks-container-object","dir":"Articles","previous_headings":"What is a chunk?","what":"Creation of a chunks container object","title":"Basic chunks","text":"chunks container may initialized empty container. However, can also initialized specific environment.  point, chunks container can reset. Resetting means expressions code stack emptied environment overridden inputted environment, defaults parent environment.  mentioned , teal.code::chunks_push function used push expressions chunks container.  mentioned , teal.code::chunks_get_rcode function used get expressions pushed chunks container.","code":"# initializing code chunks ------------------------------------------- chunks_container_empty <- teal.code::chunks$new() # initializing code chunks ------------------------------------------- env <- new.env() env$var_to_be_erased <- \"some_value\" env$x <- 0 chunks_container <- teal.code::chunks$new(envir = env)  # method to list all variables in the chunks environment chunks_container$ls() ## [1] \"var_to_be_erased\" \"x\" # function to add a chunk to a chunks container object teal.code::chunks_push(quote(print(x)), chunks = chunks_container)  # function to get all expressions from a chunks container code stack teal.code::chunks_get_rcode(chunks_container) ##    chunk_1  ## \"print(x)\" env <- new.env() env$anl <- data.frame(left = c(1, 2, 3), right = c(4, 5, 6)) env$x <- \"abc\" env$y <- 5  teal.code::chunks_reset(envir = env, chunks = chunks_container)  # note that the variable var_to_be_erased is removed chunks_container$ls() ## [1] \"anl\" \"x\"   \"y\" # this function is used to extract values of variables in a chunks container environment # note that the variable x is overriden teal.code::chunks_get_var(\"x\", chunks = chunks_container) ## [1] \"abc\" # note that the code stack has been emptied teal.code::chunks_get_rcode(chunks_container) ## character(0) teal.code::chunks_push(substitute(y <- y + 1), chunks = chunks_container) teal.code::chunks_push(substitute(x <- paste0(x, y)), chunks = chunks_container) teal.code::chunks_get_rcode(chunks_container) ##             chunk_1             chunk_2  ##        \"y <- y + 1\" \"x <- paste0(x, y)\""},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"executing-the-code-stored-in-the-stack","dir":"Articles","previous_headings":"What is a chunk?","what":"Executing the code stored in the stack","title":"Basic chunks","text":"chunks container also eval method runs code inside chunks container. method wrapped inside function teal.code::chunks_safe_eval. evaluates chunks inside container order pushed returns value last evaluated expression. possible change order run just expressions.  still possible push code expressions chunks container already evaluated. newly added expressions may also modify environment. Note code already evaluated re-evaluated newly added code evaluated.","code":"teal.code::chunks_safe_eval(chunks_container) ## [1] \"abc6\" teal.code::chunks_get_var(\"x\", chunks = chunks_container) ## [1] \"abc6\" teal.code::chunks_get_var(\"y\", chunks = chunks_container) ## [1] 6 teal.code::chunks_push(quote(z <- 10), chunks = chunks_container) teal.code::chunks_get_rcode(chunks_container) ##             chunk_1             chunk_2             chunk_3  ##        \"y <- y + 1\" \"x <- paste0(x, y)\"           \"z <- 10\" teal.code::chunks_safe_eval(chunks_container) ## [1] 10 chunks_container$ls() ## [1] \"anl\" \"x\"   \"y\"   \"z\" teal.code::chunks_get_var(\"z\", chunks = chunks_container) ## [1] 10 teal.code::chunks_push(quote(print(\"I will only be evaluated once\")), chunks = chunks_container) teal.code::chunks_safe_eval(chunks_container) ## [1] \"I will only be evaluated once\" ## [1] \"I will only be evaluated once\" teal.code::chunks_push(quote(rm(z)), chunks = chunks_container)  # note that the string \"I will only be evaluated once\" is not printed again teal.code::chunks_safe_eval(chunks_container) ## NULL # z is removed chunks_container$ls() ## [1] \"anl\" \"x\"   \"y\""},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"handling-errors-and-warnings","dir":"Articles","previous_headings":"What is a chunk?","what":"Handling errors (and warnings)","title":"Basic chunks","text":"function teal.code::chunks_safe_eval named \"safe_eval\" performs additional step handle errors calling another method chunks container object, validate_is_ok. error occurs evaluation expressions pushed chunks container, error handled stored chunk object contains expression, thus error thrown calling environment. function teal.code::chunks_is_ok return TRUE evaluated expressions chunks container evaluated without throwing error. teal.code::chunks_validate_is_ok returns useful validate(need(...)) shiny app use display error message UI instead crashing app.  use teal.code::chunks_safe_eval good practice reactive context. Since errors thrown environment calling chunks container, crash shiny app, good thing. However, shiny app also know error occurred. Calling teal.code::chunks_safe_eval instead eval method chunks container ensures validation step occurs.","code":"teal.code::chunks_is_ok(chunks_container) ## [1] TRUE teal.code::chunks_validate_is_ok(chunks = chunks_container)  # Trying an error inside a chunk ------------------------ teal.code::chunks_push(quote(stop(\"ERROR\")), chunks = chunks_container) teal.code::chunks_safe_eval(chunks_container) ## Error: The following errors(s) occurred: ## ERROR ##  ## when evaluating the following code: ## stop(\"ERROR\") teal.code::chunks_is_ok(chunks_container) ## [1] FALSE # internally, teal.code::chunks_safe_eval calls teal.code::chunks_validate_is_ok before returning teal.code::chunks_validate_is_ok(chunks = chunks_container) ## Error: The following errors(s) occurred: ## ERROR ##  ## when evaluating the following code: ## stop(\"ERROR\")"},{"path":"https://insightsengineering.github.io/teal.code/articles/basic_chunks.html","id":"tutorial-summary","dir":"Articles","previous_headings":"What is a chunk?","what":"Tutorial Summary","title":"Basic chunks","text":"summary: chunks containers host code snippets chunks containers host environment chunks container can accessed retrieve variables environment using teal.code::chunks_get_var expressions can added chunks container teal.code::chunks_push code inside container executed eval method. teal.code::chunks_is_ok allows checking execution errors teal.code::chunks_validate_is_ok allows shiny app display validate message errors UI teal.code::chunks_safe_eval evaluate snippets chunks container call validate(need(...)) let shiny app silently handle errors occurred error messages can outputted UI. information implementation chunks inside shiny/teal module, please go Advanced chunks article.","code":""},{"path":"https://insightsengineering.github.io/teal.code/articles/teal-code.html","id":"reproducibility-in-teal","dir":"Articles","previous_headings":"","what":"Reproducibility in teal","title":"Reproducibility","text":"Teal applications can designed set every output displayed, associated R code can requested via Show R code button. order develop teal application reproducible outputs app developer needs take account implementing app. reproducible code displayed outputs teal always made three parts: Header includes information : directory path server name R version date libPaths() packages’ versions. Preprocessing Code: refers code precedes teal app initialization, includes: Data imports Data transformation Checking data reproducibility Teal Module Analysis Code includes: Data merging (optional) Filtering encodings Data analysis/visualization  header created teal, preprocessing code must supplied app developer analysis code provided teal modules.","code":""},{"path":"https://insightsengineering.github.io/teal.code/articles/teal-code.html","id":"chunks","dir":"Articles","previous_headings":"","what":"Chunks","title":"Reproducibility","text":"code chunks introduced allow development reproducible shiny/teal modules. reproducible module includes “Show R Code” button can display code needed reproduce outputs module. Inside modal, pops clicking button, see: code loading necessary libraries - teal::get_code code used loading filtering data sets - teal::FilteredData code used merging multiple data sets - teal.transform::data_merge_srv code generating outputs - code chunks code chunks especially designed code leading input data set outputs. get information concept chunks, please refer article basic chunks.","code":""},{"path":"https://insightsengineering.github.io/teal.code/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dawid Kaledkowski. Author, maintainer. Pawel Rucki. Author. Nikolas Burkoff. Author. Mahmoud Hallal. Author. Maciej Nasinski. Author. Konrad Pagacz. Author. Junlue Zhao. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://insightsengineering.github.io/teal.code/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kaledkowski D, Rucki P, Burkoff N, Hallal M, Nasinski M, Pagacz K, Zhao J (2022). teal.code: Code storage execution class teal applications. R package version 0.1.0.9006.","code":"@Manual{,   title = {teal.code: Code storage and execution class for teal applications},   author = {Dawid Kaledkowski and Pawel Rucki and Nikolas Burkoff and Mahmoud Hallal and Maciej Nasinski and Konrad Pagacz and Junlue Zhao},   year = {2022},   note = {R package version 0.1.0.9006}, }"},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Code storage and execution class for teal applications","text":"teal.code R library providing tools store code execution environment associated . features include: * storing character literals code, * storing execution environment, * swapping execution environment stored code, * evaluating parts stored code, * means execute code -throw guarantee (errors demoted warnings messages stored retrieval). teal.code also ships shiny module helps inspect stored code well messages, warnings error messages resulting evaluation via shiny web application.","code":""},{"path":"https://insightsengineering.github.io/teal.code/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Code storage and execution class for teal applications","text":"repository requires personal access token install see creating using PAT. set , install latest released version package run: might need manually install package dependencies installing package without dependencies = FALSE argument install_github may produce error.","code":"Sys.setenv(GITHUB_PAT = \"your_access_token_here\") if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"insightsengineering/teal.code@*release\", dependencies = FALSE)"},{"path":"https://insightsengineering.github.io/teal.code/pull_request_template.html","id":null,"dir":"","previous_headings":"","what":"Pull Request","title":"Pull Request","text":"Fixes #nnn","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_call.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Code chunk - including expression and variables — chunk_call","text":"R6Class generator object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_call.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Code chunk - including expression and variables — chunk_call","text":"new(expression = NULL) Create object setting expression field needs type call. eval(envir = parent.frame() Evaluation code chunk. value evaluated chunk substitution variables environment values. get_eval_info() Returns list 5 elements: code, evaluation information, messages information, warnings information errors information. get_rcode(envir = parent.frame() code chunk string R-Code returned. is_ok() Get information execution went right. info() Derive slots class carries. Slots private can just derived info function return list. info_msg() Get formatted string evaluated code caught warnings errors. get_errors() Get string errors caught evaluation. get_warnings() Get string warnings caught evaluation. get_messages() Get string messages caught evaluation. is_evaluated() Return TRUE chunk evaluated, FALSE otherwise. is_warnings() Return TRUE chunk evaluated output messages, FALSE otherwise. is_messages() Return TRUE chunk evaluated output messages, FALSE otherwise.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code chunk - including expression and variables — chunk_call","text":"","code":"y <- 0 x <- chunk$new(expression = quote(y <- 1))  x$get_rcode() #> [1] \"y <- 1\" x$is_ok() #> [1] FALSE x$info_msg() #> [1] \"Chunk not evaluated yet.\" x$eval() x$is_ok() #> [1] TRUE cat(x$info_msg()) #> Everything went well! #>  #> when evaluating the following code: #> y <- 1 y == 1 #> [1] TRUE  # error handling x <- chunk$new(expression = call(\"stop\", \"test\")) x$eval() x$is_ok() #> [1] FALSE x$info_msg() #> [1] \"The following errors(s) occurred:\\ntest\\n\\nwhen evaluating the following code:\\nstop(\\\"test\\\")\\n\" x$info() #> $expression #> stop(\"test\") #>  #> $is_evaluated #> [1] TRUE #>  #> $is_error #> [1] TRUE #>  #> $is_warning #> [1] FALSE #>  #> $is_message #> [1] FALSE #>  #> $eval_msg #> [1] \"test\" #>"},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_comment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Code Chunk comment — chunk_comment","text":"R6Class generator object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_comment.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Code Chunk comment — chunk_comment","text":"comment (character) comment_to_show","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_comment.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Code Chunk comment — chunk_comment","text":"initialize(comment = NULL) Create object setting field comment get_rcode(envir = parent.frame() code chunk string R-Code returned. get_eval_info() Returns list information evaluation.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunk_comment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Chunk comment — chunk_comment","text":"","code":"x <- chunk_comment$new(comment = \"I want a comment in this line\")  x$eval() #> NULL x$get_rcode() #> [1] \"# I want a comment in this line\" safe_comment <- x$get_rcode()  x <- chunk_comment$new(comment = \"# I want a comment in this line\") x$eval() #> NULL x$get_rcode() #> [1] \"# I want a comment in this line\" stopifnot(x$get_rcode() == safe_comment)"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunkpipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a code chunk — chunkpipe","title":"Set a code chunk — chunkpipe","text":"can use two functions set code chunks within reactive inside server function teal module. can use %chunk>% want simply set call chunk. can use <%chunk>% also want assign left hand side value result expression","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunkpipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a code chunk — chunkpipe","text":"","code":"session <- new.env() session$userData <- new.env() session$ns <- function(x) {   if (length(x) == 0) {     \"id\"   } else {     paste0(\"id\", x, sep = \"-\")   } } session$userData[[session$ns(character(0))]]$chunks <- chunks$new()  x <- 5 session$userData[[session$ns(character(0))]]$chunks$reset() myval %<chunk% sum(x, 3)  mysum %<chunk% sum(x, 5)  chunks_eval(chunks = session$userData[[session$ns(character(0))]]$chunks) #> [1] 10 #>[1] 10  cat(   paste(     session$userData[[session$ns(character(0))]]$chunks$get_rcode(),     collapse = \"\\n\"   ) ) #> sum(x, 3) #> sum(x, 5) # x + 3 # sum(x, 5)"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Code chunk handler — chunks","title":"Multiple Code chunk handler — chunks","text":"chunks specialized stack call objects comments. intended capture evaluate R code sequence analysis steps.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multiple Code chunk handler — chunks","text":"R6Class generator object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Multiple Code chunk handler — chunks","text":"initialize(envir = new.env()) Initializes object. push(x, id) method adds expression code chunk comment code chunk object. id given random id generated. eval() method applies eval_id method code chunk stored inside object. get_rcode() Run get_rcode_id code chunks inside object. get_warnings() Return warnings encountered execution code inside object. get_messages() Return list warnings encountered execution code inside object. eval_info(ids = private$get_call_ids()) Accepts vector chunk ids. Returns list evaluation information chunk (messages, warnings, errors). Default hide information chunk_comment objects. Pass chunk ids see information specific ids. reset() Delete chunks handles inside stack reset environment. info() Print private content. Used debugging . info_msg() Get information evaluation chunk stack went. useful is_ok() returns FALSE. get(var, inherits = FALSE) Returns variable chunks environment. information see get. is_ok() Checks chunks evaluated error. get_eval_msg() Returns error message error. validate_is_ok(msg) Return shiny's validation error custom message is_ok returns FALSE. validate_is(var, class, msg) Return shiny's validation error custom message var class class. validate_all(var, class, msg) Return shiny's validation error custom message is_ok returns FALSE var class class. ls(.names = FALSE) Return vector bindings present environment chunks object. See ls information. get_reactive_summary() Return shiny::reactiveValues object three elements: msgs, warnings, errors. element logical vector values corresponding chunk objects inside chunks. TRUE msgs vector indicates least one message returned corresponding chunk. TRUE warnings vector indicates least one warning returned. TRUE errors vector indicates error thrown.","code":"\\code{envir}: (optional) environment to get objects from to chunks environment The method needs the parameter \\code{x}. In case this is of type \\code{call} and the code will   be evaluated via \\code{eval}. Additionally, the code can be given as a string and a comment will be inserted. This method should not be evaluated multiple times, else it throws a warning. This is due to the    fact that multiple evaluations of the following second code snippet is dangerous:    \\itemize{      \\item{1 }{a <- 2}      \\item{2 }{a <- a + 1}    }    \\code{eval} evaluates code just once and warn user if one tries to evaluate multiple times."},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple Code chunk handler — chunks","text":"","code":"x <- chunks$new()  x$push(id = \"test_1\", x = call(\"print\", 1)) res <- x$eval() #> [1] 1 res #> [1] 1  x$push(id = \"test_2\", x = call(\"print\", 2)) x$push(id = \"test_3\", x = call(\"print\", 3)) res <- x$eval() #> [1] 2 #> [1] 3 res #> [1] 3 # Below gives a warning if (FALSE) { chunks_eval(chunks = x) }  x$push(id = \"test_4\", x = call(\"print\", 4)) x$get_rcode() #>     test_1     test_2     test_3     test_4  #> \"print(1)\" \"print(2)\" \"print(3)\" \"print(4)\"   x$get_rcode() #>     test_1     test_2     test_3     test_4  #> \"print(1)\" \"print(2)\" \"print(3)\" \"print(4)\"   # Error handling x$push(id = \"test_error\", x = call(\"stop\", \"test\")) x$eval() # returns NULL, does not rise an error #> [1] 4 x$is_ok() # FALSE #> [1] FALSE x$info_msg() #> [1] \"The following errors(s) occurred:\\ntest\\n\\nwhen evaluating the following code:\\nstop(\\\"test\\\")\\n\" # Below used inside shiny apps if (FALSE) { x$validate_is_ok(\"This is my custom error message\") }  x$info() #> $envir #> <environment: 0x56417cb51250> #>  #> $id #> [1] \"test_1\"     \"test_2\"     \"test_3\"     \"test_4\"     \"test_error\" #>  #> $is_evaluated #> [1] TRUE TRUE TRUE TRUE TRUE #>  #> $is_remaining #> [1] FALSE FALSE FALSE FALSE FALSE #>  #> $is_error #> [1] FALSE FALSE FALSE FALSE  TRUE #>  #> $is_warning #> [1] FALSE FALSE FALSE FALSE FALSE #>  #> $is_message #> [1] FALSE FALSE FALSE FALSE FALSE #>  #> $eval_msg #> [1] \"The following errors(s) occurred:\\ntest\\n\\nwhen evaluating the following code:\\nstop(\\\"test\\\")\\n\" #>  #> $code_chunks #> $code_chunks[[1]] #> <chunk_call> #>   Public: #>     clone: function (deep = FALSE)  #>     eval: function (envir = parent.frame())  #>     get_errors: function ()  #>     get_eval_info: function ()  #>     get_messages: function ()  #>     get_rcode: function (envir = parent.frame())  #>     get_warnings: function ()  #>     info: function ()  #>     info_msg: function ()  #>     initialize: function (expression = NULL)  #>     is_errors: function ()  #>     is_evaluated: function ()  #>     is_messages: function ()  #>     is_ok: function ()  #>     is_warnings: function ()  #>     reset: function ()  #>   Private: #>     .is_errors: FALSE #>     .is_evaluated: TRUE #>     .is_messages: FALSE #>     .is_warnings: FALSE #>     deparse: function (x)  #>     errors:  #>     eval_msg:  #>     expression: call #>     messages:  #>     set_expression: function (expression)  #>     warnings:  #>  #> $code_chunks[[2]] #> <chunk_call> #>   Public: #>     clone: function (deep = FALSE)  #>     eval: function (envir = parent.frame())  #>     get_errors: function ()  #>     get_eval_info: function ()  #>     get_messages: function ()  #>     get_rcode: function (envir = parent.frame())  #>     get_warnings: function ()  #>     info: function ()  #>     info_msg: function ()  #>     initialize: function (expression = NULL)  #>     is_errors: function ()  #>     is_evaluated: function ()  #>     is_messages: function ()  #>     is_ok: function ()  #>     is_warnings: function ()  #>     reset: function ()  #>   Private: #>     .is_errors: FALSE #>     .is_evaluated: TRUE #>     .is_messages: FALSE #>     .is_warnings: FALSE #>     deparse: function (x)  #>     errors:  #>     eval_msg:  #>     expression: call #>     messages:  #>     set_expression: function (expression)  #>     warnings:  #>  #> $code_chunks[[3]] #> <chunk_call> #>   Public: #>     clone: function (deep = FALSE)  #>     eval: function (envir = parent.frame())  #>     get_errors: function ()  #>     get_eval_info: function ()  #>     get_messages: function ()  #>     get_rcode: function (envir = parent.frame())  #>     get_warnings: function ()  #>     info: function ()  #>     info_msg: function ()  #>     initialize: function (expression = NULL)  #>     is_errors: function ()  #>     is_evaluated: function ()  #>     is_messages: function ()  #>     is_ok: function ()  #>     is_warnings: function ()  #>     reset: function ()  #>   Private: #>     .is_errors: FALSE #>     .is_evaluated: TRUE #>     .is_messages: FALSE #>     .is_warnings: FALSE #>     deparse: function (x)  #>     errors:  #>     eval_msg:  #>     expression: call #>     messages:  #>     set_expression: function (expression)  #>     warnings:  #>  #> $code_chunks[[4]] #> <chunk_call> #>   Public: #>     clone: function (deep = FALSE)  #>     eval: function (envir = parent.frame())  #>     get_errors: function ()  #>     get_eval_info: function ()  #>     get_messages: function ()  #>     get_rcode: function (envir = parent.frame())  #>     get_warnings: function ()  #>     info: function ()  #>     info_msg: function ()  #>     initialize: function (expression = NULL)  #>     is_errors: function ()  #>     is_evaluated: function ()  #>     is_messages: function ()  #>     is_ok: function ()  #>     is_warnings: function ()  #>     reset: function ()  #>   Private: #>     .is_errors: FALSE #>     .is_evaluated: TRUE #>     .is_messages: FALSE #>     .is_warnings: FALSE #>     deparse: function (x)  #>     errors:  #>     eval_msg:  #>     expression: call #>     messages:  #>     set_expression: function (expression)  #>     warnings:  #>  #> $code_chunks[[5]] #> <chunk_call> #>   Public: #>     clone: function (deep = FALSE)  #>     eval: function (envir = parent.frame())  #>     get_errors: function ()  #>     get_eval_info: function ()  #>     get_messages: function ()  #>     get_rcode: function (envir = parent.frame())  #>     get_warnings: function ()  #>     info: function ()  #>     info_msg: function ()  #>     initialize: function (expression = NULL)  #>     is_errors: function ()  #>     is_evaluated: function ()  #>     is_messages: function ()  #>     is_ok: function ()  #>     is_warnings: function ()  #>     reset: function ()  #>   Private: #>     .is_errors: TRUE #>     .is_evaluated: TRUE #>     .is_messages: FALSE #>     .is_warnings: FALSE #>     deparse: function (x)  #>     errors: test #>     eval_msg: test #>     expression: call #>     messages:  #>     set_expression: function (expression)  #>     warnings:  #>  #>  #> $latest_result #> NULL #>   # Analysis Example  x <- chunks$new() x$push(\"# Prepare Data\") x$push(quote(x <- iris$Sepal.Length)) x$push(quote({   y <- iris$Petal.Length   {     col <- iris$Species   } }))  x$eval() #>   [1] setosa     setosa     setosa     setosa     setosa     setosa     #>   [7] setosa     setosa     setosa     setosa     setosa     setosa     #>  [13] setosa     setosa     setosa     setosa     setosa     setosa     #>  [19] setosa     setosa     setosa     setosa     setosa     setosa     #>  [25] setosa     setosa     setosa     setosa     setosa     setosa     #>  [31] setosa     setosa     setosa     setosa     setosa     setosa     #>  [37] setosa     setosa     setosa     setosa     setosa     setosa     #>  [43] setosa     setosa     setosa     setosa     setosa     setosa     #>  [49] setosa     setosa     versicolor versicolor versicolor versicolor #>  [55] versicolor versicolor versicolor versicolor versicolor versicolor #>  [61] versicolor versicolor versicolor versicolor versicolor versicolor #>  [67] versicolor versicolor versicolor versicolor versicolor versicolor #>  [73] versicolor versicolor versicolor versicolor versicolor versicolor #>  [79] versicolor versicolor versicolor versicolor versicolor versicolor #>  [85] versicolor versicolor versicolor versicolor versicolor versicolor #>  [91] versicolor versicolor versicolor versicolor versicolor versicolor #>  [97] versicolor versicolor versicolor versicolor virginica  virginica  #> [103] virginica  virginica  virginica  virginica  virginica  virginica  #> [109] virginica  virginica  virginica  virginica  virginica  virginica  #> [115] virginica  virginica  virginica  virginica  virginica  virginica  #> [121] virginica  virginica  virginica  virginica  virginica  virginica  #> [127] virginica  virginica  virginica  virginica  virginica  virginica  #> [133] virginica  virginica  virginica  virginica  virginica  virginica  #> [139] virginica  virginica  virginica  virginica  virginica  virginica  #> [145] virginica  virginica  virginica  virginica  virginica  virginica  #> Levels: setosa versicolor virginica x$get(\"col\")[1:5] #> [1] setosa setosa setosa setosa setosa #> Levels: setosa versicolor virginica if (FALSE) { x$get(\"mean\") # should not scope in getter }  x$push(\"\") # newline x$push(\"# Analysis\") x$push(quote(plot(x, y, col = col)))  x$is_ok() #> [1] FALSE x$eval()  #> NULL x$is_ok() # now all chunks were evaluated and no errors occured #> [1] TRUE  cat(paste(x$get_rcode(), collapse = \"\\n\")) #> # Prepare Data #> x <- iris$Sepal.Length #> y <- iris$Petal.Length #> col <- iris$Species #>   #> # Analysis #> plot(x, y, col = col)"},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_deep_clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deep clones a chunks object — chunks_deep_clone","text":"","code":"chunks_deep_clone(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_deep_clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deep clones a chunks object — chunks_deep_clone","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_deep_clone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deep clones a chunks object — chunks_deep_clone","text":"deep copy chunks","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_deep_clone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deep clones a chunks object — chunks_deep_clone","text":"use function need copy chunks object function makes sure associated environments deep copied (.e. independent original object)","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_deep_clone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deep clones a chunks object — chunks_deep_clone","text":"","code":"x_chunk <- chunks$new() chunks_push(chunks = x_chunk, expression = expression(y <- 1))  # A copy of x_chunk which does not share the same environment x_chunk_copy <- chunks_deep_clone(x_chunk)  # Add expression only into x_chunk chunks_push(chunks = x_chunk, expression = expression(y <- 2 * y))  # Get R code from both chunks, note it is different chunks_get_rcode(x_chunk) #>                  chunk_1                  chunk_2  #>     \"expression(y <- 1)\" \"expression(y <- 2 * y)\"  chunks_get_rcode(x_chunk_copy) #>              chunk_1  #> \"expression(y <- 1)\"   # Evaluate both chunks, note the result is different chunks_safe_eval(x_chunk) #> [1] 2 chunks_safe_eval(x_chunk_copy) #> [1] 1"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates all remaining chunks — chunks_eval","title":"Evaluates all remaining chunks — chunks_eval","text":"can evaluate remaining chunks chunks setup shiny session (see get_chunks_object()). value last chunk evaluated returned. method evaluated multiple times, else throws warning. due fact multiple evaluations following second code snippet dangerous: 1 <- 2 2 <- + 1 eval_chunks evaluates code just warn user one tries evaluate multiple times.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates all remaining chunks — chunks_eval","text":"","code":"chunks_eval(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates all remaining chunks — chunks_eval","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_eval_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chunks evaluation message — chunks_get_eval_msg","text":"","code":"chunks_get_eval_msg(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_eval_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chunks evaluation message — chunks_get_eval_msg","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_eval_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chunks evaluation message — chunks_get_eval_msg","text":"(character) chunks evaluation message","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_rcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the R-Code from a chunks object — chunks_get_rcode","title":"Returns the R-Code from a chunks object — chunks_get_rcode","text":"function returns list R-Code reproduces currently registered chunks inside chunk stack.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_rcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the R-Code from a chunks object — chunks_get_rcode","text":"","code":"chunks_get_rcode(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_rcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the R-Code from a chunks object — chunks_get_rcode","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_rcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the R-Code from a chunks object — chunks_get_rcode","text":"R code stored inside chunks can used reproduce value evaluation code chunks.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variable from chunk environment — chunks_get_var","text":"","code":"chunks_get_var(var, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variable from chunk environment — chunks_get_var","text":"var (character) variable name chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_get_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get variable from chunk environment — chunks_get_var","text":"variable chunks environment","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_is_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check chunks status (i.e. evaluated and no errors) — chunks_is_ok","text":"","code":"chunks_is_ok(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_is_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check chunks status (i.e. evaluated and no errors) — chunks_is_ok","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_is_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check chunks status (i.e. evaluated and no errors) — chunks_is_ok","text":"(logical) flag whether everything good","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets messages from the chunks object — chunks_messages","title":"Gets messages from the chunks object — chunks_messages","text":"function returns list messages encountered evaluation code chunks object.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets messages from the chunks object — chunks_messages","text":"","code":"chunks_messages(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets messages from the chunks object — chunks_messages","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pushes a code chunk for global chunks — chunks_push","text":"","code":"chunks_push(expression, id = NULL, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pushes a code chunk for global chunks — chunks_push","text":"expression (call) Expression contains function call. id optional, (character) ID given code chunk chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pushes a code chunk for global chunks — chunks_push","text":"Nothing, just add chunk chunks argument","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pushes a code chunk for global chunks — chunks_push","text":"","code":"all_chunks <- chunks$new() chunks_push(call(\"as.character\", x = 3), \"tbl\", chunks = all_chunks)  x <- 3 chunks_push(quote(as.character(x)), \"tbl2\", chunks = all_chunks)"},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pushes a chunks stack to global chunks — chunks_push_chunks","text":"","code":"chunks_push_chunks(x, overwrite = FALSE, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pushes a chunks stack to global chunks — chunks_push_chunks","text":"x (chunks) stack object overwrite optional, (logical) Whether ignore conflicts two chunk environments use added one default chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pushes a chunks stack to global chunks — chunks_push_chunks","text":"Nothing, just add chunk chunks argument","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_chunks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pushes a chunks stack to global chunks — chunks_push_chunks","text":"","code":"chunks_object <- chunks$new() chunks_push(bquote(x <- 1), chunks = chunks_object)  chunks_object2 <- chunks$new() chunks_push(bquote(y <- 1), chunks = chunks_object2)  chunks_push_chunks(chunks_object2, chunks = chunks_object)  chunks_get_rcode(chunks_object) #>       chunk_1 chunk_1_WOXYA  #>      \"x <- 1\"      \"y <- 1\""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_comment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pushes a code comment chunk for global chunks — chunks_push_comment","text":"","code":"chunks_push_comment(comment, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_comment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pushes a code comment chunk for global chunks — chunks_push_comment","text":"comment (codecharacter) Comment inserted Show-R code. chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_comment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pushes a code comment chunk for global chunks — chunks_push_comment","text":"","code":"all_chunks <- chunks$new() chunks_push_comment(\"this is a comment\", chunks = all_chunks)  chunks_get_rcode(chunks = all_chunks) == \"# this is a comment\" #> chunk_1  #>    TRUE"},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_data_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pushes a merged_dataset to chunks — chunks_push_data_merge","text":"","code":"chunks_push_data_merge(x, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_data_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pushes a merged_dataset to chunks — chunks_push_data_merge","text":"x (list) outcome data_merge_srv chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_new_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds an empty line to the code chunks — chunks_push_new_line","text":"","code":"chunks_push_new_line(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_new_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds an empty line to the code chunks — chunks_push_new_line","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_push_new_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds an empty line to the code chunks — chunks_push_new_line","text":"","code":"all_chunks <- chunks$new() chunks_push_new_line(chunks = all_chunks)  chunks_get_rcode(chunks = all_chunks) == \" \" #> chunk_1  #>    TRUE"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Resets the current chunk list — chunks_reset","title":"Resets the current chunk list — chunks_reset","text":"Empty chunk list remaining evaluated list.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resets the current chunk list — chunks_reset","text":"","code":"chunks_reset(envir = parent.frame(), chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resets the current chunk list — chunks_reset","text":"envir (environment) environment hand chunks. chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resets the current chunk list — chunks_reset","text":"nothing, modifies shiny session object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_safe_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates all remaining chunks and validate if error — chunks_safe_eval","title":"Evaluates all remaining chunks and validate if error — chunks_safe_eval","text":"can evaluate remaining chunks chunks setup shiny session (see get_chunks_object()). value last chunk evaluated returned.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_safe_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates all remaining chunks and validate if error — chunks_safe_eval","text":"","code":"chunks_safe_eval(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_safe_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates all remaining chunks and validate if error — chunks_safe_eval","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_uneval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resets the evaluation of the chunks. — chunks_uneval","text":"","code":"chunks_uneval(   chunks = get_chunks_object(),   overwrite = FALSE,   envir = parent.frame() )"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_uneval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resets the evaluation of the chunks. — chunks_uneval","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object overwrite (logical) Whether use values current environment just use new one envir (environment) environment use overwriting. used overwrite TRUE","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_uneval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resets the evaluation of the chunks. — chunks_uneval","text":"Keep code pieces.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise shiny validate error if chunks status is not ok or variable is not of a certain class — chunks_validate_all","text":"","code":"chunks_validate_all(var, class, msg = NULL, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise shiny validate error if chunks status is not ok or variable is not of a certain class — chunks_validate_all","text":"var (character) variable name class (character) class name msg optional, (character) custom error message, NULL default error message used chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise shiny validate error if chunks status is not ok or variable is not of a certain class — chunks_validate_all","text":"shiny validation error conditions met","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Raise shiny validate error if chunks status is not ok or variable is not of a certain class — chunks_validate_all","text":"chunks_validate_is_ok chunks_validate_is","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Executes validate statements on custom expressions that are evaluated inside a chunks object's environment — chunks_validate_custom","text":"","code":"chunks_validate_custom(x, msg = NULL, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Executes validate statements on custom expressions that are evaluated inside a chunks object's environment — chunks_validate_custom","text":"x (language) expression evaluates TRUE FALSE inside chunks environment msg optional, (character) custom error message, NULL default error message used chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Executes validate statements on custom expressions that are evaluated inside a chunks object's environment — chunks_validate_custom","text":"shiny validation error x evaluates FALSE chunks environment","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise shiny validate error if variable is not of a certain class — chunks_validate_is","text":"","code":"chunks_validate_is(var, class, msg = NULL, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise shiny validate error if variable is not of a certain class — chunks_validate_is","text":"var (character) variable name class (character) class name msg optional, (character) custom error message, NULL default error message used chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise shiny validate error if variable is not of a certain class — chunks_validate_is","text":"shiny validation error variable certain class","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise shiny validate error if chunks status is not ok — chunks_validate_is_ok","text":"","code":"chunks_validate_is_ok(msg = NULL, chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise shiny validate error if chunks status is not ok — chunks_validate_is_ok","text":"msg optional, (character) custom error message, NULL default error message used chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise shiny validate error if chunks status is not ok — chunks_validate_is_ok","text":"shiny validation error chunks ok","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_validate_is_ok.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Raise shiny validate error if chunks status is not ok — chunks_validate_is_ok","text":"chunks_is_ok","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets warnings from the chunks object — chunks_warnings","title":"Gets warnings from the chunks object — chunks_warnings","text":"function returns list warnings encountered evaluation code chunks object.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets warnings from the chunks object — chunks_warnings","text":"","code":"chunks_warnings(chunks = get_chunks_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/chunks_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets warnings from the chunks object — chunks_warnings","text":"chunks optional, (chunks) object. provided automatic chunks object detection run via get_chunks_object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/get_chunks_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets chunks object — get_chunks_object","text":"","code":"get_chunks_object(session = get_session_object(), parent_idx = 0L)"},{"path":"https://insightsengineering.github.io/teal.code/reference/get_chunks_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets chunks object — get_chunks_object","text":"session optional, (ShinySession)shiny session object, missing getDefaultReactiveDomain used. parent_idx optional (integer) shiny parent environment chunks object taken.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_chunks_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets chunks object — get_chunks_object","text":"chunks object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_srv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server part of get_chunks_info — get_eval_details_srv","text":"","code":"get_eval_details_srv(id, chunks)"},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_srv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server part of get_chunks_info — get_eval_details_srv","text":"id ID string corresponds ID used call module's UI function. chunks (chunks) object, messages, warnings errors gathered","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_srv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Server part of get_chunks_info — get_eval_details_srv","text":"observer evaluation_details actionButton","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The UI part of get chunks info module — get_eval_details_ui","text":"","code":"get_eval_details_ui(id)"},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The UI part of get chunks info module — get_eval_details_ui","text":"id (character) id shiny module","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_eval_details_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The UI part of get chunks info module — get_eval_details_ui","text":"(shiny.tag)","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_number_in_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","title":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","text":"Creates shiny::tag element, represents colored box character inside .","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_number_in_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","text":"","code":"get_number_in_box(character, box_color, char_color)"},{"path":"https://insightsengineering.github.io/teal.code/reference/get_number_in_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","text":"character (character numeric value) single string put inside box box_color (character value) hex code color (including #) recognized CSS3 color name char_color (character value) hex code color (including #) recognized CSS3 color name","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_number_in_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","text":"shiny::tag character color char_color inside box color box_color","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/get_number_in_box.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a shiny::tag element, which represents a colored box\nwith a character inside of it. — get_number_in_box","text":"Uses Font-Awesome library icons get box icon.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/include_css_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Include CSS files from /inst/css/ package directory to application header — include_css_files","title":"Include CSS files from /inst/css/ package directory to application header — include_css_files","text":"system.file used access files packages, work devtools. Therefore, redefine method package needed. Thus, export method","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/include_css_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include CSS files from /inst/css/ package directory to application header — include_css_files","text":"","code":"include_css_files(pattern = \"*\")"},{"path":"https://insightsengineering.github.io/teal.code/reference/include_css_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include CSS files from /inst/css/ package directory to application header — include_css_files","text":"pattern (character) pattern files included","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/include_css_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include CSS files from /inst/css/ package directory to application header — include_css_files","text":"HTML code includes CSS files","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/init_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows using chunks in the global environment of a teal app — init_chunks","text":"","code":"init_chunks(new_chunks = chunks$new(), session = get_session_object())"},{"path":"https://insightsengineering.github.io/teal.code/reference/init_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allows using chunks in the global environment of a teal app — init_chunks","text":"new_chunks optional, (chunks_stack) new object initialize session optional, (ShinySession) shiny session object.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/init_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allows using chunks in the global environment of a teal app — init_chunks","text":"nothing, modifies shiny session object","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/init_chunks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Allows using chunks in the global environment of a teal app — init_chunks","text":"chunks","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/overwrite_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overwrites chunks object in session — overwrite_chunks","text":"","code":"overwrite_chunks(   x = chunks$new(envir = parent.frame()),   session = get_session_object() )"},{"path":"https://insightsengineering.github.io/teal.code/reference/overwrite_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overwrites chunks object in session — overwrite_chunks","text":"x (chunks) chunks-object used inside current session. session optional, (ShinySession) shiny session object, missing getDefaultReactiveDomain used.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/overwrite_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overwrites chunks object in session — overwrite_chunks","text":"nothing, modifies shiny session object","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/reference/remove_enclosing_curly_braces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes curly brackets from string — remove_enclosing_curly_braces","text":"","code":"remove_enclosing_curly_braces(x)"},{"path":"https://insightsengineering.github.io/teal.code/reference/remove_enclosing_curly_braces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes curly brackets from string — remove_enclosing_curly_braces","text":"x (character) string code chunk","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/remove_enclosing_curly_braces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes curly brackets from string — remove_enclosing_curly_braces","text":"string without curly braces","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/show_eval_details_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Shows Evaluation Details Modal — show_eval_details_modal","title":"Shows Evaluation Details Modal — show_eval_details_modal","text":"Use shiny::showModal() function show errors generated chunks.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/show_eval_details_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Evaluation Details Modal — show_eval_details_modal","text":"","code":"show_eval_details_modal(chunks)"},{"path":"https://insightsengineering.github.io/teal.code/reference/show_eval_details_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Evaluation Details Modal — show_eval_details_modal","text":"chunks (chunks) object, messages, warnings errors gathered","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/show_eval_details_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shows Evaluation Details Modal — show_eval_details_modal","text":"shiny.tag","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/show_eval_details_modal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shows Evaluation Details Modal — show_eval_details_modal","text":"shiny::showModal() get_eval_details_srv()","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/teal.code-package.html","id":null,"dir":"Reference","previous_headings":"","what":"teal.code: Code storage and execution class for teal applications — teal.code-package","title":"teal.code: Code storage and execution class for teal applications — teal.code-package","text":"teal.code package contains functionalities can used store execute R calls. chunks class allows create teal module returns code reproduce application outputs.","code":""},{"path":"https://insightsengineering.github.io/teal.code/reference/teal.code-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"teal.code: Code storage and execution class for teal applications — teal.code-package","text":"Maintainer: Dawid Kaledkowski dawid.kaledkowski@roche.com Authors: Pawel Rucki pawel.rucki@roche.com Nikolas Burkoff nikolas.burkoff@roche.com Mahmoud Hallal mahmoud.hallal@roche.com Maciej Nasinski maciej.nasinski@contractors.roche.com Konrad Pagacz konrad.pagacz@contractors.roche.com Junlue Zhao zhaoj88@gene.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.code/news/index.html","id":"enhancements-0-1-0-9006","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"teal.code 0.1.0.9006","text":"New wrapper function chunks_deep_clone make deep (.e. completely independent) copy chunks objects.","code":""},{"path":"https://insightsengineering.github.io/teal.code/news/index.html","id":"miscellaneous-0-1-0-9006","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"teal.code 0.1.0.9006","text":"Added template pkgdown site. Added vignette explain advanced features chunks object.","code":""},{"path":"https://insightsengineering.github.io/teal.code/news/index.html","id":"tealcode-010","dir":"Changelog","previous_headings":"","what":"teal.code 0.1.0","title":"teal.code 0.1.0","text":"Initial release teal.code, package code storage execution class teal applications.","code":""}]
